---
// Dynamically import the social data JSON module. This allows Astro to correctly bundle the data.
const socialDataModules = await import.meta.glob('../data/social_data.json');
const socialData = (await socialDataModules['../data/social_data.json']()) as { 
	letterboxd: { 
		recent_reviews: MovieReview[],
		stats?: {
			total_films: number,
			films_this_year: number,
			total_lists: number,
			following_count: number,
			followers_count: number
		}
	},
	goodreads: { 
		recent_reviews: BookReview[],
		stats?: {
			total_ratings: number,
			average_rating: number,
			total_reviews: number,
			books_this_year?: number,
			pages_this_year?: number
		}
	},
	strava: { 
		recent_runs: StravaActivity[],
		recent_bikes: StravaActivity[],
		recent_hikes: StravaActivity[],
		stats?: {
			running: {
				ytd: ActivityTotals,
				all_time: ActivityTotals,
				recent: ActivityTotals
			},
			biking: {
				ytd: ActivityTotals,
				all_time: ActivityTotals,
				recent: ActivityTotals
			},
			swimming: {
				ytd: ActivityTotals,
				all_time: ActivityTotals,
				recent: ActivityTotals
			},
			biggest_ride_distance: number,
			biggest_climb_elevation_gain: number
		}
	}
};
const letterboxdData = socialData.letterboxd;
const goodreadsData = socialData.goodreads;
const stravaData = socialData.strava;

/**
 * Represents a movie review from Letterboxd.
 */
interface MovieReview {
	/** The title of the movie. */
	title: string;
	/** The year the movie was released. */
	year: number;
	/** The rating given to the movie (out of 5). */
	rating: number;
	/** The date the movie was watched. */
	watched_date: string;
	/** Whether the movie was a rewatch. */
	is_rewatch: boolean;
	/** The review content (may include HTML). */
	review: string;
	/** The URL of the movie poster image. */
	image_url: string;
	/** The URL to the movie on Letterboxd. */
	link: string;
}

/**
 * Represents a book review from Goodreads.
 */
interface BookReview {
	/** The title of the book. */
	title: string;
	/** The author of the book. */
	author: string;
	/** The rating given to the book (out of 5). */
	rating: number;
	/** The date the book was read. */
	read_at: string;
	/** The review content (may include HTML). */
	review: string;
	/** The URL of the book cover image. */
	image_url: string;
	/** The URL to the book on Goodreads. */
	link: string;
}

/**
 * Represents a Strava activity.
 */
interface StravaActivity {
	/** The unique identifier for the activity. */
	id: number;
	/** The name of the activity. */
	name: string;
	/** The type of activity (e.g., "Run", "Ride"). */
	type: string;
	/** The distance of the activity in miles. */
	distance: number;
	/** The moving time of the activity in seconds. */
	moving_time: number;
	/** The elapsed time of the activity in seconds. */
	elapsed_time: number;
	/** The total elevation gain in feet. */
	elevation_gain: number;
	/** The average pace in minutes per mile. */
	average_pace: number;
	/** The average heart rate during the activity. */
	average_heartrate: number | null;
	/** The maximum heart rate during the activity. */
	max_heartrate: number | null;
	/** The average cadence during the activity. */
	average_cadence: number | null;
	/** The average power output in watts (for cycling). */
	average_watts: number | null;
	/** The start date and time of the activity. */
	start_date: string;
	/** The description of the activity. */
	description: string | null;
	/** Whether the activity was a commute. */
	commute: boolean;
	/** Information about the activity's map. */
	map: {
		/** The ID of the map. */
		id: string;
		/** The encoded polyline of the activity route. */
		summary_polyline: string;
		/** The resource state of the map. */
		resource_state: number;
	};
}

/**
 * Represents activity totals from Strava stats.
 */
interface ActivityTotals {
	/** The number of activities. */
	count: number;
	/** The total distance in miles. */
	distance: number;
	/** The total moving time in seconds. */
	moving_time: number;
	/** The total elapsed time in seconds. */
	elapsed_time: number;
	/** The total elevation gain in feet. */
	elevation_gain: number;
}

/**
 * Converts a numerical rating to a string of star characters.
 * For example, 3.5 becomes "★★★½".
 * @param rating The numerical rating (e.g., out of 5).
 * @returns A string representation of the rating using star characters.
 */
function getStarRating(rating: number): string {
	const fullStars = Math.floor(rating);
	const hasHalfStar = rating % 1 >= 0.5;
	
	return '★'.repeat(fullStars) + (hasHalfStar ? '½' : '');
}

/**
 * Formats a duration in seconds into a human-readable string (e.g., "1h 23m" or "45m").
 * @param seconds The duration in seconds.
 * @returns A formatted string representing the duration.
 */
function formatDuration(seconds: number): string {
	const hours = Math.floor(seconds / 3600);
	const minutes = Math.floor((seconds % 3600) / 60);
	
	if (hours > 0) {
		return `${hours}h ${minutes}m`;
	}
	return `${minutes}m`;
}

/**
 * Formats a date string into a more readable format "Month Day, Year".
 * For example, "2023-10-26T00:00:00.000Z" becomes "October 26, 2023".
 * @param dateString The date string to format.
 * @returns A formatted date string.
 */
function formatDate(dateString: string): string {
	const date = new Date(dateString);
	return date.toLocaleDateString('en-US', { 
		year: 'numeric', 
		month: 'long', 
		day: 'numeric' 
	});
}

/**
 * Calculates and formats speed given distance (in miles) and time (in seconds).
 * @param distance The distance traveled in miles.
 * @param time The time taken in seconds.
 * @returns The speed formatted as a string to one decimal place (e.g., "7.2 mph").
 */
function formatSpeed(distance: number, time: number): string {
	const speed = distance / (time / 3600);
	return speed.toFixed(1);
}
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Noah Eisen</title>
		<meta name="description" content="Noah Eisen is an engineer based in San Francisco, focused on building creative tools, fast prototypes, and playful side projects." />
		<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
     integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
     crossorigin=""/>
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />
		<!-- Google tag (gtag.js) -->
		<script async src="https://www.googletagmanager.com/gtag/js?id=G-DW532NM54T"></script>
		<script>
			// TypeScript declarations
			interface Window {
				dataLayer: any[];
				gtag: (...args: any[]) => void;
			}

			// Google Analytics 4 (GA4) setup: Initializes dataLayer and gtag function.
			window.dataLayer = window.dataLayer || [];
			window.gtag = function() { window.dataLayer.push(arguments); };
			window.gtag('js', new Date());
			window.gtag('config', 'G-DW532NM54T');
		</script>
		<script define:vars={{ stravaData }}>
			// Make Strava data (passed from Astro frontmatter) available globally on the window object for client-side JavaScript access.
			window.__STRAVA_DATA__ = stravaData;
		</script>
		<script>
			document.addEventListener('DOMContentLoaded', async function() {
				// Handles the "See more/Show less" functionality for movie reviews.
				const seeMoreButton = document.querySelector('.see-more-button');
				const moreMovies = document.getElementById('more-movies');
				
				if (seeMoreButton && moreMovies) {
					seeMoreButton.addEventListener('click', function() {
						if (moreMovies.classList.contains('hidden')) {
							moreMovies.classList.remove('hidden');
							seeMoreButton.textContent = 'Show less';
							// Track "see more movies" button click.
							window.gtag('event', 'see_more_movies', {
								'event_category': 'engagement',
								'event_label': 'movies'
							});
						} else {
							moreMovies.classList.add('hidden');
							seeMoreButton.textContent = 'See more of my recent movies';
						}
					});
				}

				// Books button
				// TODO: This selector is fragile as it relies on the button being the second one with this class. Consider adding a unique ID to this button for more robust selection.
				const seeMoreBooksButton = document.querySelectorAll('.see-more-button')[1];
				const moreBooks = document.getElementById('more-books');
				
				// Handles the "See more/Show less" functionality for book reviews.
				if (seeMoreBooksButton && moreBooks) {
					seeMoreBooksButton.addEventListener('click', function() {
						if (moreBooks.classList.contains('hidden')) {
							moreBooks.classList.remove('hidden');
							seeMoreBooksButton.textContent = 'Show less';
							// Track "see more books" button click.
							window.gtag('event', 'see_more_books', {
								'event_category': 'engagement',
								'event_label': 'books'
							});
						} else {
							moreBooks.classList.add('hidden');
							seeMoreBooksButton.textContent = 'See more of my recent books';
						}
					});
				}

				// Track social link clicks
				document.querySelectorAll('.social-link').forEach(link => {
					link.addEventListener('click', function(this: HTMLElement) {
						const href = this.getAttribute('href');
						if (href?.includes('github.com')) {
							// Track GitHub social link click.
							window.gtag('event', 'click', {
								'event_category': 'social',
								'event_label': 'github'
							});
						} else if (href?.includes('linkedin.com')) {
							// Track LinkedIn social link click.
							window.gtag('event', 'click', {
								'event_category': 'social',
								'event_label': 'linkedin'
							});
						} else if (href?.includes('resume.pdf')) {
							// Track Resume social link click.
							window.gtag('event', 'click', {
								'event_category': 'social',
								'event_label': 'resume'
							});
						}
					});
				});

				// Handle timeline item expansion/collapse
				document.querySelectorAll('.timeline-header').forEach(header => {
					header.addEventListener('click', function(this: HTMLElement) {
						const timelineItem = this.closest('.timeline-item');
						const content = timelineItem?.querySelector('.timeline-details');
						const arrow = this.querySelector('.timeline-arrow') as HTMLElement;
						
						if (content && arrow && timelineItem) {
							const isExpanded = content.classList.contains('expanded');
							
							if (isExpanded) {
								content.classList.remove('expanded');
								timelineItem.classList.remove('expanded');
								arrow.style.transform = 'rotate(0deg)';
							} else {
								content.classList.add('expanded');
								timelineItem.classList.add('expanded');
								arrow.style.transform = 'rotate(90deg)';
							}
						}
					});
				});

				// Track profile link clicks
				document.querySelectorAll('.profile-link').forEach(link => {
					link.addEventListener('click', function(this: HTMLElement) {
						const href = this.getAttribute('href');
						if (href?.includes('letterboxd.com')) {
							// Track Letterboxd profile link click.
							window.gtag('event', 'click', {
								'event_category': 'profile',
								'event_label': 'letterboxd'
							});
						} else if (href?.includes('goodreads.com')) {
							// Track Goodreads profile link click.
							window.gtag('event', 'click', {
								'event_category': 'profile',
								'event_label': 'goodreads'
							});
						} else if (href?.includes('strava.com')) {
							// Track Strava profile link click.
							window.gtag('event', 'click', {
								'event_category': 'profile',
								'event_label': 'strava'
							});
						}
					});
				});

				try {
					// Dynamically import Leaflet and polyline libraries for map rendering.
					const L = (await import('leaflet')).default;
					const polyline = (await import('@mapbox/polyline')).default;

					// Get Strava data from the window object
					const stravaData = (window as any).__STRAVA_DATA__;

					/**
					 * Initializes a Leaflet map to display a Strava activity route.
					 * @param {string} elementId The ID of the HTML element where the map will be rendered.
					 * @param {string} encodedPolyline The encoded polyline string for the activity route.
					 */
					function initMap(elementId: string, encodedPolyline: string) {
						if (!encodedPolyline) return;

						const coordinates = polyline.decode(encodedPolyline);
						if (coordinates.length === 0) return;

						// Create map
						const map = L.map(elementId, {
							zoomControl: false,
							dragging: false,
							scrollWheelZoom: false,
						});

						// Add OpenStreetMap dark tiles
						L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
							attribution: ''
						}).addTo(map);

						// Add the route polyline
						const path = L.polyline(coordinates.map(coord => [coord[0], coord[1]]), {
							color: '#FC4C02', // Strava's brand red
							weight: 3,
							opacity: 0.8
						}).addTo(map);

						// Fit the map to the polyline bounds
						map.fitBounds(path.getBounds(), {
							padding: [20, 20]
						});
					}

					// Initialize maps for embedded recent runs
					stravaData?.recent_runs?.slice(0, 2).forEach((run, index) => {
						if (run.map?.summary_polyline) {
							initMap(`run-map-${index}`, run.map.summary_polyline);
						}
					});

					// Initialize maps for embedded recent bikes  
					stravaData?.recent_bikes?.slice(0, 2).forEach((bike, index) => {
						if (bike.map?.summary_polyline) {
							initMap(`bike-map-${index}`, bike.map.summary_polyline);
						}
					});
				} catch (error) {
					console.error('Error initializing maps:', error);
				}
			});
		</script>
		<style>
			/* === Root Variables === */
			:root {
				--primary-color: #3b82f6;
				--accent-color: #10b981;
				--gold-color: #f59e0b;
				--text-color: #e5e7eb;
				--text-muted: #9ca3af;
				--background-color: #111827;
				--card-bg: #1f2937;
				--card-border: #374151;
				--link-color: #60a5fa;
				--link-hover-color: #93c5fd;
				--glow-color: rgba(59, 130, 246, 0.5);
			}

			/* === Global Styles === */
			body {
				margin: 0;
				padding: 0;
				min-height: 100vh;
				font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
				background-color: var(--background-color);
				color: var(--text-color);
				line-height: 1.6;
			}

			.container {
				max-width: 900px;
				margin: 0 auto;
				padding: 2rem;
			}

			/* === Header Styles === */
			header {
				margin-bottom: 4rem;
				display: flex;
				align-items: center;
				gap: 3rem;
			}

			.header-content {
				flex: 1;
			}

			.profile-image-container {
				flex-shrink: 0;
				width: 200px;
				height: 200px;
				border-radius: 50%;
				overflow: hidden;
				border: 2px solid var(--primary-color);
				box-shadow: 0 0 10px rgba(59, 130, 246, 0.3);
			}

			.profile-image {
				width: 100%;
				height: 100%;
				object-fit: cover;
			}

			h1 {
				font-size: 2.5rem;
				font-weight: 700;
				margin-bottom: 1rem;
				background: linear-gradient(to right, var(--primary-color), var(--accent-color));
				-webkit-background-clip: text;
				-webkit-text-fill-color: transparent;
			}

			h2 {
				font-size: 1.75rem;
				font-weight: 600;
				margin-bottom: 1.5rem;
				color: var(--text-color);
			}

			p {
				font-size: 1.1rem;
				margin-bottom: 1.5rem;
				color: var(--text-muted);
			}

			/* === General Section Styles === */
			section {
				margin-bottom: 4rem;
			}

			/* === Social Links === */
			.social-links {
				display: flex;
				gap: 1.5rem;
				margin-top: 1.5rem;
			}

			.social-link {
				color: var(--link-color);
				text-decoration: none;
				font-weight: 500;
				transition: all 0.2s ease;
				display: flex;
				align-items: center;
				gap: 0.5rem;
			}

			.social-link:hover {
				color: var(--link-hover-color);
				text-shadow: 0 0 8px var(--glow-color);
			}

			/* === Section: Career === */
			.career-highlights {
				display: grid;
				grid-template-columns: repeat(2, 1fr);
				gap: 2rem;
				margin-top: 1.5rem;
				max-width: 1200px;
				margin-left: auto;
				margin-right: auto;
			}

			.highlight-card {
				background-color: var(--card-bg);
				border: 1px solid var(--card-border);
				border-radius: 8px;
				padding: 1.5rem;
				transition: all 0.3s ease;
				display: flex;
				flex-direction: column;
				position: relative;
			}

			.highlight-card .company-icon {
				position: absolute;
				top: 1.5rem;
				right: 1.5rem;
				font-size: 1.5rem;
				color: var(--primary-color);
				opacity: 0.7;
			}

			.highlight-card:hover .company-icon {
				opacity: 1;
				transform: scale(1.1);
			}

			.highlight-card h3 {
				font-size: 1.25rem;
				font-weight: 600;
				margin-bottom: 0.25rem;
				color: var(--primary-color);
			}

			.highlight-card .job-title {
				font-size: 1.1rem;
				font-weight: 500;
				margin-bottom: 0.25rem;
				color: var(--text-color);
			}

			.highlight-card .date-range {
				font-size: 0.9rem;
				color: var(--text-muted);
				margin-bottom: 0.75rem;
				font-style: italic;
			}

			.highlight-card p {
				font-size: 0.95rem;
				line-height: 1.6;
				margin-bottom: 0;
				color: var(--text-muted);
			}

			.highlight-card a {
				color: var(--text-muted);
				text-decoration: underline;
				text-decoration-thickness: 1px;
				text-underline-offset: 2px;
				transition: all 0.2s ease;
			}

			.highlight-card a:hover {
				color: var(--text-color);
				text-decoration-thickness: 2px;
			}

			.highlight-card:hover {
				transform: translateY(-3px);
				box-shadow: 0 0 15px rgba(59, 130, 246, 0.2);
			}

			/* === Card Styles === */
			/* --- Highlight Card (Used in Career Section) --- */
			.highlight-card {
				background-color: var(--card-bg);
				border: 1px solid var(--card-border);
				border-radius: 8px;
				padding: 1.5rem;
				transition: all 0.3s ease;
				display: flex;
				flex-direction: column;
				position: relative;
			}

			.highlight-card .company-icon {
				position: absolute;
				top: 1.5rem;
				right: 1.5rem;
				font-size: 1.5rem;
				color: var(--primary-color);
				opacity: 0.7;
			}

			.highlight-card:hover .company-icon {
				opacity: 1;
				transform: scale(1.1);
			}

			.highlight-card h3 {
				font-size: 1.25rem;
				font-weight: 600;
				margin-bottom: 0.25rem;
				color: var(--primary-color);
			}

			.highlight-card .job-title {
				font-size: 1.1rem;
				font-weight: 500;
				margin-bottom: 0.25rem;
				color: var(--text-color);
			}

			.highlight-card .date-range {
				font-size: 0.9rem;
				color: var(--text-muted);
				margin-bottom: 0.75rem;
				font-style: italic;
			}

			.highlight-card p {
				font-size: 0.95rem;
				line-height: 1.6;
				margin-bottom: 0;
				color: var(--text-muted);
			}

			.highlight-card a {
				color: var(--text-muted);
				text-decoration: underline;
				text-decoration-thickness: 1px;
				text-underline-offset: 2px;
				transition: all 0.2s ease;
			}

			.highlight-card a:hover {
				color: var(--text-color);
				text-decoration-thickness: 2px;
			}

			.highlight-card:hover {
				transform: translateY(-3px);
				box-shadow: 0 0 15px rgba(59, 130, 246, 0.2);
			}

			/* === Section: Side Projects === */
			.projects-grid {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
				gap: 1.5rem;
				margin-top: 1.5rem;
			}

			.project-card {
				background-color: var(--card-bg);
				border: 1px solid var(--card-border);
				border-radius: 8px;
				padding: 1.5rem;
				transition: all 0.3s ease;
				text-decoration: none;
				color: var(--text-color);
				display: block;
			}

			.project-card:hover {
				transform: translateY(-5px);
				box-shadow: 0 0 15px rgba(59, 130, 246, 0.2);
				border-color: var(--primary-color);
			}

			.project-title {
				font-size: 1.25rem;
				font-weight: 600;
				margin-bottom: 0.5rem;
				color: var(--primary-color);
			}

			.project-description {
				font-size: 0.95rem;
				color: var(--text-muted);
			}

			/* --- Project Card --- */
			.project-card {
				background-color: var(--card-bg);
				border: 1px solid var(--card-border);
				border-radius: 8px;
				padding: 1.5rem;
				transition: all 0.3s ease;
				text-decoration: none;
				color: var(--text-color);
				display: block;
			}

			.project-card:hover {
				transform: translateY(-5px);
				box-shadow: 0 0 15px rgba(59, 130, 246, 0.2);
				border-color: var(--primary-color);
			}

			.project-title {
				font-size: 1.25rem;
				font-weight: 600;
				margin-bottom: 0.5rem;
				color: var(--primary-color);
			}

			.project-description {
				font-size: 0.95rem;
				color: var(--text-muted);
			}

			#projects a { /* Specific link styling within projects section */
				color: var(--link-color);
				text-decoration: none;
				font-weight: 500;
				transition: all 0.2s ease;
			}

			#projects a:hover {
				color: var(--link-hover-color);
				text-shadow: 0 0 8px var(--glow-color);
			}

			/* === Footer Styles === */
			footer {
				text-align: center;
				margin-top: 4rem;
				padding-top: 2rem;
				border-top: 1px solid var(--card-border);
				color: var(--text-muted);
				font-size: 0.9rem;
			}

			/* === Media Queries === */
			/* --- Tablet and Smaller (max-width: 768px) --- */
			@media (max-width: 768px) {
				.container {
					padding: 1.5rem;
				}

				header {
					flex-direction: column-reverse;
					text-align: center;
					gap: 2rem;
				}

				.profile-image-container {
					width: 150px;
					height: 150px;
				}

				.social-links {
					justify-content: center;
				}

				h1 {
					font-size: 2rem;
				}

				h2 {
					font-size: 1.5rem;
				}

				.career-highlights, .projects-grid {
					grid-template-columns: 1fr;
				}

				.interests-grid {
					grid-template-columns: 1fr;
				}

				.movie-card {
					flex-direction: column;
					align-items: flex-start;
				}

				.movie-card img {
					width: 100%;
					max-width: 200px;
					height: auto;
					aspect-ratio: 2/3;
				}

				.recent-movies {
					grid-template-columns: 1fr;
				}

				.stat-grid {
					grid-template-columns: 1fr;
				}

				/* Make fitness activity cards stack vertically on mobile */
				.interest-card:nth-child(3) .recent-movies {
					grid-template-columns: 1fr;
				}
			}

			/* --- Smaller Desktop (max-width: 900px) --- */
			@media (max-width: 900px) {
				.career-highlights {
					grid-template-columns: 1fr;
					gap: 1.5rem;
				}
			}

			/* === Section: Other Interests === */
			#other-interests {
				margin-bottom: 4rem;
			}

			/* --- Interest Card (Parent for Movie/Book/Fitness cards) --- */
			.interests-grid {
				display: grid;
				grid-template-columns: 1fr;
				gap: 2rem;
				margin-top: 1.5rem;
			}

			.interest-card {
				background-color: var(--card-bg);
				border: 1px solid var(--card-border);
				border-radius: 8px;
				padding: 1.5rem;
				transition: all 0.3s ease;
				position: relative;
			}

			.interest-card h3 {
				font-size: 1.25rem;
				font-weight: 600;
				margin-bottom: 1rem;
				color: var(--primary-color);
			}

			.interest-card .section-icon {
				position: absolute;
				top: 1.5rem;
				right: 1.5rem;
				font-size: 1.5rem;
				color: var(--primary-color);
				opacity: 0.7;
			}

			.interest-card:hover .section-icon {
				opacity: 1;
				transform: scale(1.1);
			}

			.interest-card p {
				color: var(--text-muted);
			}

			/* --- Movie/Book/Activity Card Container --- */
			.recent-movies { /* This class is used for movies, books, and fitness activities lists */
				margin-top: 1rem;
				display: grid;
				grid-template-columns: 1fr;
				gap: 1.5rem;
			}

			.movie-card {
				margin-bottom: 0;
				padding: 1.5rem;
				border: 1px solid var(--card-border);
				border-radius: 8px;
				background-color: rgba(31, 41, 55, 0.5);
				display: flex;
				gap: 1rem;
				transition: all 0.3s ease;
			}

			.movie-card:hover {
				transform: translateY(-2px);
				box-shadow: 0 0 15px rgba(59, 130, 246, 0.1);
				border-color: var(--primary-color);
			}

			.movie-card:last-child {
				margin-bottom: 0;
			}

			.movie-card img {
				width: 150px;
				height: 225px;
				border-radius: 4px;
				object-fit: cover;
				box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
			}

			/* --- Movie/Book/Activity Info --- */
			.movie-info { /* Shared by movie, book, and activity cards */
				flex: 1;
				display: flex;
				flex-direction: column;
			}

			.movie-info h4 {
				margin: 0 0 0.25rem 0;
				font-size: 1.1rem;
				color: var(--text-color);
			}

			/* === Timeline Styles === */
			#career .timeline {
				position: relative;
				padding-left: 2rem;
			}

			#career .timeline::before {
				content: '';
				position: absolute;
				top: 0;
				left: 1rem;
				width: 2px;
				height: 100%;
				background-color: var(--card-border);
			}

			#career .timeline-item {
				position: relative;
				margin-bottom: 2rem;
			}

			#career .timeline-icon {
				position: absolute;
				left: 0;
				top: 0.25rem;
				width: 1.75rem;
				height: 1.75rem;
				border-radius: 50%;
				background-color: var(--background-color);
				border: 2px solid var(--primary-color);
				display: flex;
				align-items: center;
				justify-content: center;
				color: var(--primary-color);
				font-size: 0.85rem;
			}

			#career .timeline-content {
				margin-left: 3rem;
				background-color: var(--card-bg);
				border: 1px solid var(--card-border);
				border-radius: 8px;
				padding: 1rem 1.5rem;
				transition: all 0.3s ease;
			}

			#career .timeline-content:hover {
				background-color: rgba(59, 130, 246, 0.05);
				border-color: var(--primary-color);
				box-shadow: 0 0 15px rgba(59, 130, 246, 0.1);
			}

			#career .timeline-header {
				cursor: pointer;
				display: flex;
				align-items: center;
				justify-content: space-between;
				padding: 0;
				margin-bottom: 0;
				transition: all 0.2s ease;
			}

			#career .timeline-header-content {
				flex: 1;
			}

			#career .timeline-header-content .job-title {
				max-height: 50px;
				opacity: 1;
				transition: all 0.3s ease;
				margin-bottom: 0.25rem;
			}

			#career .timeline-header-content .date-range {
				font-size: 0.8rem;
				margin-bottom: 0;
			}

			#career .timeline-item.expanded .timeline-content {
				padding: 1.5rem;
			}

			#career .timeline-arrow {
				color: var(--primary-color);
				font-size: 1rem;
				transition: transform 0.2s ease;
				margin-left: 1rem;
			}

			#career .timeline-details {
				max-height: 0;
				overflow: hidden;
				transition: max-height 0.3s ease;
				margin-top: 0;
			}

			#career .timeline-details.expanded {
				max-height: 2000px;
			}

			#career .timeline-content h3 {
				margin-top: 0;
				font-size: 1.25rem;
				color: var(--primary-color);
				margin-bottom: 0.25rem;
			}

			#career .timeline-content .job-title {
				font-size: 1.1rem;
				font-weight: 500;
				margin-bottom: 0.25rem;
				color: var(--text-color);
			}

			#career .timeline-content .date-range {
				font-size: 0.9rem;
				color: var(--text-muted);
				margin-bottom: 0.75rem;
				font-style: italic;
			}

			#career .timeline-content ul {
				margin: 0;
				padding-left: 1.2rem;
			}

			#career .timeline-content li {
				margin-bottom: 0.75rem;
				color: var(--text-muted);
				font-size: 0.95rem;
				line-height: 1.6;
			}

			#career .timeline-content li:last-child {
				margin-bottom: 0;
			}

			@media (max-width: 768px) {
				#career .timeline {
					padding-left: 1.5rem;
				}

				#career .timeline-content {
					margin-left: 2.5rem;
				}
			}

			/* === Restored Utility Styles (Movies/Books/Fitness) === */

			.rating { /* Star rating display */
				color: var(--gold-color);
				font-weight: bold;
				margin: 0;
				margin-bottom: 0.5rem;
				letter-spacing: 2px;
				line-height: 1;
			}

			.review { /* Review text block */
				margin: -1rem 0rem 0rem 0rem;
				color: var(--text-muted);
				font-size: 0.95rem;
			}

			.review p {
				margin: 0;
			}

			.review em {
				font-style: italic;
			}

			.review strong {
				font-weight: bold;
			}

			.review a {
				color: var(--link-color);
				text-decoration: none;
				font-weight: 500;
				transition: all 0.2s ease;
			}

			.review a:hover {
				color: var(--link-hover-color);
				text-shadow: 0 0 8px var(--glow-color);
			}

			.watched-date { /* Date styling for movies/books */
				font-size: 0.75rem;
				color: var(--text-muted);
				opacity: 0.5;
				margin-top: 0.15rem;
				margin-bottom: 0.5rem;
				font-style: italic;
				letter-spacing: 0.5px;
				font-weight: 300;
			}

			.movie-link {
				color: var(--link-color);
				text-decoration: none;
				font-weight: 500;
				transition: all 0.2s ease;
				font-size: 0.9rem;
				margin-top: auto;
			}

			.movie-link:hover {
				color: var(--link-hover-color);
				text-shadow: 0 0 8px var(--glow-color);
			}

			/* --- Profile Links & Separators --- */
			.profile-separator {
				border: none;
				border-top: 1px solid var(--card-border);
				margin: 2rem 0;
				width: 50%;
				margin-left: auto;
				margin-right: auto;
			}

			.profile-link-container {
				text-align: center;
			}

			.profile-link {
				color: var(--link-color);
				text-decoration: none;
				font-weight: 500;
				transition: all 0.2s ease;
				display: inline-block;
			}

			.profile-link:hover {
				color: var(--link-hover-color);
				text-shadow: 0 0 8px var(--glow-color);
			}

			.last-updated {
				text-align: center;
				font-size: 0.8rem;
				color: var(--text-muted);
				opacity: 0.7;
				margin-top: 0.5rem;
				font-style: italic;
			}

			/* --- "See More" Button Styles --- */
			.see-more-container {
				text-align: center;
				margin: 1.5rem 0;
			}

			.see-more-button {
				background: none;
				border: 1px solid var(--primary-color);
				color: var(--primary-color);
				padding: 0.5rem 1rem;
				border-radius: 4px;
				font-size: 0.9rem;
				font-weight: 500;
				cursor: pointer;
				transition: all 0.2s ease;
			}

			.see-more-button:hover {
				background-color: var(--primary-color);
				color: var(--text-color);
			}

			.more-movies { /* Container for additional movies/books shown by "See More" button */
				margin-top: 1.5rem;
				display: grid;
				grid-template-columns: 1fr;
				gap: .75rem;
			}

			.hidden { /* Utility class to hide elements */
				display: none;
			}

			/* === Stat Highlight === */
			.stat-highlight {
				color: var(--primary-color);
				font-weight: bold;
				font-size: 1.05em;
			}

			/* === Section: Fitness (Strava) === */
			.activity-date {
				font-size: 0.75rem;
				color: var(--text-muted);
				opacity: 0.7;
				margin-top: 0.15rem;
				margin-bottom: 0.5rem;
				font-style: italic;
				letter-spacing: 0.5px;
				font-weight: 300;
			}

			.activity-stats {
				margin-top: -1rem;
				color: var(--text-muted);
				font-size: 0.95rem;
				line-height: 1.6;
			}

			.activity-stats strong {
				color: var(--text-color);
				font-weight: 500;
			}

			.activity-icon {
				margin-right: 0.5rem;
				color: var(--primary-color);
			}

			.strava-embed { /* Styles for deprecated Strava embed (if ever used) */
				width: 100%;
				max-width: 590px;
				height: 405px;
				margin: 1rem 0;
				border-radius: 4px;
				overflow: hidden;
			}

			.stat-grid {
				display: grid;
				grid-template-columns: repeat(2, 1fr);
				gap: 1rem;
				margin: 1rem 0;
			}

			.stat-item {
				display: flex;
				flex-direction: column;
				align-items: center;
				padding: 0.75rem;
				background-color: rgba(31, 41, 55, 0.5);
				border-radius: 4px;
				border: 1px solid var(--card-border);
			}

			.stat-label {
				font-size: 0.75rem;
				color: var(--text-muted);
				text-transform: uppercase;
				letter-spacing: 0.5px;
				margin-bottom: 0.25rem;
			}

			.stat-value {
				font-size: 1.1rem;
				color: var(--text-color);
				font-weight: 500;
			}

			.activity-map {
				width: 100%;
				height: 300px;
				margin: 1rem 0;
				border-radius: 4px;
				overflow: hidden;
				border: 1px solid var(--card-border);
			}

			/* === Comprehensive Stats Layout === */
			.comprehensive-stats {
				margin: 1.5rem 0;
			}

			.activity-section {
				margin-bottom: 2rem;
				padding: 1.5rem;
				background-color: rgba(31, 41, 55, 0.3);
				border-radius: 8px;
				border: 1px solid var(--card-border);
			}

			.activity-section:last-child {
				margin-bottom: 0;
			}

			.activity-section h4 {
				margin: 0 0 1rem 0;
				font-size: 1.2rem;
				color: var(--primary-color);
				display: flex;
				align-items: center;
				gap: 0.5rem;
			}

			.time-period-stats {
				display: grid;
				grid-template-columns: 1fr 1fr;
				gap: 1.5rem;
			}

			.period-group h5 {
				margin: 0 0 0.75rem 0;
				font-size: 1rem;
				color: var(--text-color);
				font-weight: 500;
				text-align: center;
				padding-bottom: 0.5rem;
				border-bottom: 1px solid var(--card-border);
			}

			.stat-grid-detailed {
				display: grid;
				grid-template-columns: 1fr 1fr;
				gap: 0.75rem;
			}

			.stat-grid-detailed .stat-item {
				display: flex;
				flex-direction: column;
				align-items: center;
				padding: 0.75rem 0.5rem;
				background-color: rgba(31, 41, 55, 0.4);
				border-radius: 6px;
				border: 1px solid var(--card-border);
				transition: all 0.2s ease;
			}

			.stat-grid-detailed .stat-item:hover {
				background-color: rgba(59, 130, 246, 0.1);
				border-color: var(--primary-color);
			}

			.stat-grid-detailed .stat-label {
				font-size: 0.7rem;
				color: var(--text-muted);
				text-transform: uppercase;
				letter-spacing: 0.5px;
				margin-bottom: 0.25rem;
				text-align: center;
			}

			.stat-grid-detailed .stat-value {
				font-size: 1rem;
				color: var(--text-color);
				font-weight: 600;
				text-align: center;
			}

			/* === Responsive Design for Comprehensive Stats === */
			@media (max-width: 768px) {
				.time-period-stats {
					grid-template-columns: 1fr;
					gap: 1rem;
				}
				
				.stat-grid-detailed {
					grid-template-columns: 1fr 1fr;
				}
				
				.activity-section {
					padding: 1rem;
				}
			}

			@media (max-width: 480px) {
				.stat-grid-detailed {
					grid-template-columns: 1fr;
				}
			}

			/* === Fitness Activities Layout === */
			.fitness-activities { /* Grid for run/bike cards */
				display: grid;
				grid-template-columns: 1fr 1fr;
				gap: 1rem;
			}

			@media (max-width: 768px) {
				.fitness-activities { /* Stack fitness activities on smaller screens */
					grid-template-columns: 1fr;
				}
			}

			/* === Embedded Recent Activities === */
			.recent-activities-embedded {
				margin-top: 1.5rem;
				padding-top: 1.5rem;
				border-top: 1px solid var(--card-border);
			}

			.recent-activities-embedded h5 {
				margin: 0 0 1rem 0;
				font-size: 1rem;
				color: var(--text-color);
				font-weight: 500;
				text-align: center;
			}

			.embedded-activities-grid {
				display: grid;
				grid-template-columns: 1fr 1fr;
				gap: 1rem;
			}

			.embedded-activity-card {
				background-color: rgba(31, 41, 55, 0.4);
				border: 1px solid var(--card-border);
				border-radius: 6px;
				padding: 1rem;
				transition: all 0.2s ease;
			}

			.embedded-activity-card:hover {
				background-color: rgba(59, 130, 246, 0.05);
				border-color: var(--primary-color);
				transform: translateY(-1px);
			}

			.embedded-activity-header {
				margin-bottom: 0.75rem;
			}

			.embedded-activity-header h6 {
				margin: 0 0 0.25rem 0;
				font-size: 0.9rem;
				color: var(--text-color);
				font-weight: 500;
				line-height: 1.3;
			}

			.embedded-activity-date {
				font-size: 0.7rem;
				color: var(--text-muted);
				opacity: 0.8;
				font-style: italic;
			}

			.embedded-activity-stats {
				display: grid;
				grid-template-columns: 1fr 1fr;
				gap: 0.5rem;
				margin-bottom: 0.75rem;
			}

			.embedded-stat {
				display: flex;
				flex-direction: column;
				align-items: center;
				padding: 0.4rem 0.25rem;
				background-color: rgba(31, 41, 55, 0.6);
				border-radius: 4px;
				border: 1px solid var(--card-border);
			}

			.embedded-stat-label {
				font-size: 0.6rem;
				color: var(--text-muted);
				text-transform: uppercase;
				letter-spacing: 0.5px;
				margin-bottom: 0.15rem;
				text-align: center;
			}

			.embedded-stat-value {
				font-size: 0.8rem;
				color: var(--text-color);
				font-weight: 500;
				text-align: center;
			}

			.embedded-activity-link {
				color: var(--link-color);
				text-decoration: none;
				font-size: 0.75rem;
				font-weight: 500;
				transition: all 0.2s ease;
				display: block;
				text-align: center;
			}

			.embedded-activity-link:hover {
				color: var(--link-hover-color);
			}

			.embedded-activity-map {
				width: 100%;
				height: 200px;
				margin: 0.75rem 0;
				border-radius: 4px;
				overflow: hidden;
				border: 1px solid var(--card-border);
			}

			/* === Responsive Design for Embedded Activities === */
			@media (max-width: 768px) {
				.embedded-activities-grid {
					grid-template-columns: 1fr;
					gap: 0.75rem;
				}
				
				.embedded-activity-stats {
					grid-template-columns: 1fr 1fr;
				}
			}

			@media (max-width: 480px) {
				.embedded-activity-stats {
					grid-template-columns: 1fr;
					gap: 0.4rem;
				}
			}
		</style>
	</head>
	<body>
		<!-- Main Page Content -->
		<main class="container" role="main">
			<!-- Header Section Start -->
			<header>
				<div class="header-content">
					<h1>Noah Eisen</h1>
					<p>
						Hi, I'm Noah, an engineer based in San Francisco with a background in Computer 
						Science and Mathematics from the University of Michigan. Over the past decade, 
						I've led teams and shipped projects at companies like Google, Waymo, and 
						Faire. My experience spans infrastructure and product development, with a consistent 
						emphasis on clean code, maintainable systems, and thoughtful architecture.</p>
					<div class="social-links">
						<a href="https://github.com/ncteisen" class="social-link" tabindex="0" aria-label="GitHub Profile" target="_blank" rel="noopener noreferrer">
							GitHub
						</a>
						<a href="https://linkedin.com/in/ncteisen" class="social-link" tabindex="0" aria-label="LinkedIn Profile" target="_blank" rel="noopener noreferrer">
							LinkedIn
						</a>
						<a href="mailto:ncteisen@gmail.com" class="social-link" tabindex="0" aria-label="Email">
							Email
						</a>
						<a href="/resume.pdf" class="social-link" tabindex="0" aria-label="Resume PDF" target="_blank" rel="noopener noreferrer">
							Resume
						</a>
					</div>
				</div>
				<div class="profile-image-container">
					<img 
						src="/images/profile-placeholder.jpg" 
						alt="Noah Eisen" 
						class="profile-image"
						width="200"
						height="200"
					/>
				</div>
			</header>
			<!-- Header Section End -->

			<!-- Career Snapshot Section Start -->
			<section id="career">
				<h2>Career Timeline</h2>
				<div class="timeline">
					<!-- Faire -->
					<div class="timeline-item">
						<div class="timeline-icon"><i class="fas fa-store" aria-hidden="true"></i></div>
						<div class="timeline-content">
							<div class="timeline-header">
								<div class="timeline-header-content">
									<h3>Faire</h3>
									<div class="job-title">Staff Software Engineer</div>
									<div class="date-range">Feb 2022 - Present</div>
								</div>
								<i class="fas fa-chevron-right timeline-arrow" aria-hidden="true"></i>
							</div>
							<div class="timeline-details">
								<p>Faire is an online wholesale marketplace that connects retailers and brands globally, empowering small businesses to compete with major retailers such as Amazon and Walmart. In a dynamic startup environment, my role has evolved significantly, with key achievements including:</p>
								<ul>
									<li>Authored technical vision document for Faire's payment systems. Initiated and drove critical projects, such as extracting a payment service and developing a SQL-based invariant validation system. These systems eliminated payment-related SEVs.</li>
									<li>Served as Senior Engineering Manager and tech lead for the Shipping team, overseeing 8–12 engineers. Developed a long-term technical strategy to optimize shipping costs and improve system stability. Delivered +0.25pp to contribution margin on $2B GMV.</li>
									<li>Led 5 person tiger team to build Volume Pricing (akin to airline loyalty programs) from design to launch in under two months.</li>
									<li>Drove org-wide cultural transformations across 300+ engineers by leading several cross-functional High-Performance Culture working groups, raising engineering standards and execution velocity.</li>
								</ul>
							</div>
						</div>
					</div>

					<!-- Waymo -->
					<div class="timeline-item">
						<div class="timeline-icon"><i class="fas fa-car" aria-hidden="true"></i></div>
						<div class="timeline-content">
							<div class="timeline-header">
								<div class="timeline-header-content">
									<h3>Waymo</h3>
									<div class="job-title">Senior Software Engineer</div>
									<div class="date-range">Feb 2019 - Feb 2022</div>
								</div>
								<i class="fas fa-chevron-right timeline-arrow" aria-hidden="true"></i>
							</div>
							<div class="timeline-details">
								<p>Waymo is an Alphabet company focusing on the development of self-driving technology. I worked on the Fleet Infrastructure team where I was the tech lead for the OpsApp, an internal Android app that is used by 1000+ safety drivers daily. Some highlights include:</p>
								<ul>
									<li>Tech lead of 7 person team, including 3 engineers, a product manager, a product operations specialist, a technical program manager, and a UX designer.</li>
									<li>Received early promotion to Senior Software Engineer within first year of joining.</li>
									<li>Optimized data path from the self-driving car to the phone to achieve sub-300ms latency in support of streaming real-time telemetries to the safety driver.</li>
									<li>Co-authored <a class="profile-link" href="https://patents.justia.com/patent/20230347937" target="_blank" rel="noopener noreferrer">this patent</a> based on my work designing and building the tool suite that enabled roadside assistance team to navigate to a self-driving car on public roads within minutes of an incident.</li>
								</ul>
							</div>
						</div>
					</div>

					<!-- Google -->
					<div class="timeline-item">
						<div class="timeline-icon"><i class="fab fa-google" aria-hidden="true"></i></div>
						<div class="timeline-content">
							<div class="timeline-header">
								<div class="timeline-header-content">
									<h3>Google</h3>
									<div class="job-title">Software Engineer</div>
									<div class="date-range">Aug 2016 - Feb 2019</div>
								</div>
								<i class="fas fa-chevron-right timeline-arrow" aria-hidden="true"></i>
							</div>
							<div class="timeline-details">
								<p>gRPC is Google's next-gen RPC system, built from the ground up in open source. gRPC is a highly performant system built around a simple yet powerful wire protocol. The library provides idiomatic APIs in nine supported languages. Through 250+ pull requests, and even more internal changes, I have contributed mainly to gRPC's C core. I have also made significant contributions to the C++ and Python wrapped layers. Some highlights include:</p>
								<ul>
									<li>Created the team's internal benchmarking framework, automatic regression detection system, and performance dashboards.</li>
									<li>Migrated TensorFlow's distributed runtime to use gRPC internally at Google.</li>
									<li>Implemented connection-level monitoring feature for the C++ stack, which exports critical debugging data of live services and presents them in a simple HTML page.</li>
									<li>Co-authored <a class="profile-link" href="https://github.com/grpc/proposal/blob/master/A6-client-retries.md" target="_blank" rel="noopener noreferrer">RFC for gRPC client retries in 2017</a>. It is now implemented across all language stacks.</li>
									<li>Created and delivered <a class="profile-link" href="https://www.youtube.com/watch?v=cWlXQP9AORo" target="_blank" rel="noopener noreferrer">40 minute tech talk on gRPC performance at KubeCon</a>.</li>
								</ul>
							</div>
						</div>
					</div>

					<!-- Bloomberg -->
					<div class="timeline-item">
						<div class="timeline-icon"><i class="fas fa-chart-line" aria-hidden="true"></i></div>
						<div class="timeline-content">
							<div class="timeline-header">
								<div class="timeline-header-content">
									<h3>Bloomberg</h3>
									<div class="job-title">Software Engineering Intern</div>
									<div class="date-range">May 2015 - Aug 2015</div>
								</div>
								<i class="fas fa-chevron-right timeline-arrow" aria-hidden="true"></i>
							</div>
							<div class="timeline-details">
								<p>Full stack internship on the infrastructure team. Key accomplishments include:</p>
								<ul>
									<li>Created multi-tiered tool (frontend UI, service layer, backend task) for Bloomberg developers to aid in the task of debugging and killing haywire processes on production machines.</li>
									<li>Developed a program to track the master logfile on specific production machines and raise alerts and tickets automatically based on previous decisions.</li>
									<li>Won first place in algorithmic coding competition among all of the interns.</li>
								</ul>
							</div>
						</div>
					</div>

					<!-- TAPP TV -->
					<div class="timeline-item">
						<div class="timeline-icon"><i class="fas fa-laptop-code" aria-hidden="true"></i></div>
						<div class="timeline-content">
							<div class="timeline-header">
								<div class="timeline-header-content">
									<h3>TAPP TV</h3>
									<div class="job-title">Freelance Programmer</div>
									<div class="date-range">Jan 2015 - Apr 2015</div>
								</div>
								<i class="fas fa-chevron-right timeline-arrow" aria-hidden="true"></i>
							</div>
							<div class="timeline-details">
								<p>Freelance programming work focused on social media data analysis and audience research. Key contributions include:</p>
								<ul>
									<li>Collaborated with team of freelance coders to create several methods of exploiting Twitter data in order to gauge audience interest and find potential markets for celebrity TV channels.</li>
									<li>Designed and developed a program that uses the Twitter API to construct graphs from follower/following relationships, then performs various metrics on the data (PageRank, HITS, etc).</li>
								</ul>
							</div>
						</div>
					</div>

					<!-- Jump Trading -->
					<div class="timeline-item">
						<div class="timeline-icon"><i class="fas fa-vial" aria-hidden="true"></i></div>
						<div class="timeline-content">
							<div class="timeline-header">
								<div class="timeline-header-content">
									<h3>Jump Trading, LLC</h3>
									<div class="job-title">QA Intern</div>
									<div class="date-range">Jun 2014 - Aug 2014</div>
								</div>
								<i class="fas fa-chevron-right timeline-arrow" aria-hidden="true"></i>
							</div>
							<div class="timeline-details">
								<p>Quality assurance internship at a high-frequency trading firm in Chicago. Key accomplishments include:</p>
								<ul>
									<li>Developed an automated testing wrapper to validate company software responsible for sending orders to the BATS exchange.</li>
									<li>Planned and executed comprehensive set of manual tests on a program providing a live market feed from the exchange.</li>
								</ul>
							</div>
						</div>
					</div>

				</div>
			</section>
			<!-- Career Snapshot Section End -->

			<!-- Side Projects Section Start -->
			<section id="projects">
				<h2>Side Projects</h2>
				<p>Newer projects coming soon! In the meantime, you can check out my <a href="/old">old website</a> for projects I made many years ago.</p>
				<div class="projects-grid">
					<a href="/projects/sarah-jumps" class="project-card" tabindex="0">
						<h3 class="project-title">Sarah Jumps</h3>
						<p class="project-description">Doodle jump inspired game I made to explore vibe coding.</p>
					</a>
					<a href="https://www.hypertextlibrary.com/" class="project-card" tabindex="0" target="_blank" rel="noopener noreferrer">
						<h3 class="project-title">The Hypertext Library</h3>
						<p class="project-description">Literature-based side project I made a decade ago after taking a class on Ulysses.</p>
					</a>
					<a href="/old/projects/p1/" class="project-card" tabindex="0">
						<h3 class="project-title">Room Game</h3>
						<p class="project-description">Simple text-based game I made in college to teach myself JavaScript.</p>
					</a>
				</div>
			</section>
			<!-- Side Projects Section End -->

			<!-- Other Interests Section Start -->
			<section id="other-interests">
				<h2>Other Interests</h2>
				<div class="interests-grid">
					<div class="interest-card">
						<h3>Movies</h3>
						<i class="fas fa-film section-icon" aria-hidden="true"></i>
						<p>I'm an avid film enthusiast and maintain a detailed log of my movie watching on Letterboxd. I have rated <a href={`https://letterboxd.com/ncteisen/year/${new Date().getFullYear()}/`} target="_blank" rel="noopener noreferrer" class="profile-link"><span class="stat-highlight">{letterboxdData.stats?.films_this_year || 0}</span></a> films this year and <a href="https://letterboxd.com/ncteisen/films/" target="_blank" rel="noopener noreferrer" class="profile-link"><span class="stat-highlight">{letterboxdData.stats?.total_films?.toLocaleString() || 0}</span></a> since starting to use the site.</p>
						<div class="recent-movies">
							{letterboxdData.recent_reviews.slice(0, 1).map((movie: MovieReview) => (
								<div class="movie-card">
									<img src={movie.image_url} alt={`Poster for ${movie.title}`} width="200" height="300" />
									<div class="movie-info">
										<h4>{movie.title} ({movie.year})</h4>
										<p class="rating">{getStarRating(movie.rating)}</p>
										<p class="watched-date">Watched on {movie.watched_date}</p>
										{/* Using set:html to render HTML content from the movie review. Astro sanitizes this by default. */}
										<div class="review" set:html={movie.review}></div>
										<a href={movie.link} target="_blank" rel="noopener noreferrer" class="movie-link">View on Letterboxd</a>
									</div>
								</div>
							))}
						</div>
						<div class="see-more-container">
							<button class="see-more-button">See more of my recent movies</button>
						</div>
						<div id="more-movies" class="more-movies hidden">
							{letterboxdData.recent_reviews.slice(1).map((movie: MovieReview) => (
								<div class="movie-card">
									<img src={movie.image_url} alt={`Poster for ${movie.title}`} width="200" height="300" />
									<div class="movie-info">
										<h4>{movie.title} ({movie.year})</h4>
										<p class="rating">{getStarRating(movie.rating)}</p>
										<p class="watched-date">Watched on {movie.watched_date}</p>
										{/* Using set:html to render HTML content from the movie review. Astro sanitizes this by default. */}
										<div class="review" set:html={movie.review}></div>
										<a href={movie.link} target="_blank" rel="noopener noreferrer" class="movie-link">View on Letterboxd</a>
									</div>
								</div>
							))}
						</div>
						<hr class="profile-separator" />
						<div class="last-updated">
							Last updated: {new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
						</div>
						<div class="profile-link-container">
							<a href="https://letterboxd.com/ncteisen/" target="_blank" rel="noopener noreferrer" class="profile-link">
								View my full Letterboxd profile
							</a>
						</div>
					</div>

					<div class="interest-card">
						<h3>Books</h3>
						<i class="fas fa-book section-icon" aria-hidden="true"></i>
						<p>I love reading and track my books on Goodreads. I have read <a href={`https://www.goodreads.com/user/year_in_books/${new Date().getFullYear()}/44763252`} target="_blank" rel="noopener noreferrer" class="profile-link"><span class="stat-highlight">{goodreadsData.stats?.books_this_year || 0}</span></a> books this year and have rated <a href="https://www.goodreads.com/review/list/44763252?sort=rating&view=reviews" target="_blank" rel="noopener noreferrer" class="profile-link"><span class="stat-highlight">{goodreadsData.stats?.total_ratings || 0}</span></a> since I started using the site.</p>
						<div class="recent-movies">
							{goodreadsData.recent_reviews.slice(0, 1).map((book: BookReview) => (
								<div class="movie-card">
									<img src={book.image_url} alt={`Cover of ${book.title}`} width="200" height="300" />
									<div class="movie-info">
										<h4>{book.title}</h4>
										<p class="rating">{getStarRating(book.rating)}</p>
										<p class="watched-date">Read on {book.read_at}</p>
										{/* Using set:html to render HTML content from the book review. Astro sanitizes this by default. */}
										<div class="review" set:html={book.review}></div>
										<a href={book.link} target="_blank" rel="noopener noreferrer" class="movie-link">View on Goodreads</a>
									</div>
								</div>
							))}
						</div>
						<div class="see-more-container">
							<button class="see-more-button">See more of my recent books</button>
						</div>
						<div id="more-books" class="more-movies hidden">
							{goodreadsData.recent_reviews.slice(1).map((book: BookReview) => (
								<div class="movie-card">
									<img src={book.image_url} alt={`Cover of ${book.title}`} width="200" height="300" />
									<div class="movie-info">
										<h4>{book.title}</h4>
										<p class="rating">{getStarRating(book.rating)}</p>
										<p class="watched-date">Read on {book.read_at}</p>
										{/* Using set:html to render HTML content from the book review. Astro sanitizes this by default. */}
										<div class="review" set:html={book.review}></div>
										<a href={book.link} target="_blank" rel="noopener noreferrer" class="movie-link">View on Goodreads</a>
									</div>
								</div>
							))}
						</div>
						<hr class="profile-separator" />
						<div class="last-updated">
							Last updated: {new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
						</div>
						<div class="profile-link-container">
							<a href="https://www.goodreads.com/user/show/44763252-noah-eisen" target="_blank" rel="noopener noreferrer" class="profile-link">
								View my full Goodreads profile
							</a>
						</div>
					</div>

					<div class="interest-card">
						<h3>Fitness</h3>
						<i class="fas fa-heartbeat section-icon" aria-hidden="true"></i>
						<p>I enjoy running and cycling around San Francisco.</p>
						
						<div class="comprehensive-stats">
							<div class="activity-section">
								<h4><i class="fas fa-running activity-icon" aria-hidden="true"></i>Running</h4>
								<div class="time-period-stats">
									<div class="period-group">
										<h5>Year to Date</h5>
										<div class="stat-grid-detailed">
											<div class="stat-item">
												<span class="stat-label">Activities</span>
												<span class="stat-value">{stravaData.stats?.running.ytd.count || 0}</span>
											</div>
											<div class="stat-item">
												<span class="stat-label">Distance</span>
												<span class="stat-value">{stravaData.stats?.running.ytd.distance || 0} mi</span>
											</div>
											<div class="stat-item">
												<span class="stat-label">Elevation</span>
												<span class="stat-value">{stravaData.stats?.running.ytd.elevation_gain?.toLocaleString() || 0} ft</span>
											</div>
											<div class="stat-item">
												<span class="stat-label">Time</span>
												<span class="stat-value">{formatDuration(stravaData.stats?.running.ytd.elapsed_time || 0)}</span>
											</div>
										</div>
									</div>
									<div class="period-group">
										<h5>All Time</h5>
										<div class="stat-grid-detailed">
											<div class="stat-item">
												<span class="stat-label">Activities</span>
												<span class="stat-value">{stravaData.stats?.running.all_time.count || 0}</span>
											</div>
											<div class="stat-item">
												<span class="stat-label">Distance</span>
												<span class="stat-value">{stravaData.stats?.running.all_time.distance?.toLocaleString() || 0} mi</span>
											</div>
											<div class="stat-item">
												<span class="stat-label">Elevation</span>
												<span class="stat-value">{stravaData.stats?.running.all_time.elevation_gain?.toLocaleString() || 0} ft</span>
											</div>
											<div class="stat-item">
												<span class="stat-label">Time</span>
												<span class="stat-value">{formatDuration(stravaData.stats?.running.all_time.elapsed_time || 0)}</span>
											</div>
										</div>
									</div>
								</div>
								
								<div class="recent-activities-embedded">
									<h5>Recent Runs</h5>
									<div class="embedded-activities-grid">
										{stravaData.recent_runs.slice(0, 2).map((run: StravaActivity, index: number) => (
											<div class="embedded-activity-card">
												<div class="embedded-activity-header">
													<h6>{run.name}</h6>
													<span class="embedded-activity-date">{formatDate(run.start_date)}</span>
												</div>
												{run.map?.summary_polyline && (
													<div id={`run-map-${index}`} class="embedded-activity-map"></div>
												)}
												<div class="embedded-activity-stats">
													<div class="embedded-stat">
														<span class="embedded-stat-label">Distance</span>
														<span class="embedded-stat-value">{run.distance} mi</span>
													</div>
													<div class="embedded-stat">
														<span class="embedded-stat-label">Time</span>
														<span class="embedded-stat-value">{formatDuration(run.moving_time)}</span>
													</div>
													<div class="embedded-stat">
														<span class="embedded-stat-label">Elevation</span>
														<span class="embedded-stat-value">{run.elevation_gain} ft</span>
													</div>
													<div class="embedded-stat">
														<span class="embedded-stat-label">Pace</span>
														<span class="embedded-stat-value">{run.average_pace} min/mi</span>
													</div>
												</div>
												<a href={`https://www.strava.com/activities/${run.id}`} target="_blank" rel="noopener noreferrer" class="embedded-activity-link">View on Strava</a>
											</div>
										))}
									</div>
								</div>
							</div>

							<div class="activity-section">
								<h4><i class="fas fa-biking activity-icon" aria-hidden="true"></i>Biking</h4>
								<div class="time-period-stats">
									<div class="period-group">
										<h5>Year to Date</h5>
										<div class="stat-grid-detailed">
											<div class="stat-item">
												<span class="stat-label">Activities</span>
												<span class="stat-value">{stravaData.stats?.biking.ytd.count || 0}</span>
											</div>
											<div class="stat-item">
												<span class="stat-label">Distance</span>
												<span class="stat-value">{stravaData.stats?.biking.ytd.distance || 0} mi</span>
											</div>
											<div class="stat-item">
												<span class="stat-label">Elevation</span>
												<span class="stat-value">{stravaData.stats?.biking.ytd.elevation_gain?.toLocaleString() || 0} ft</span>
											</div>
											<div class="stat-item">
												<span class="stat-label">Time</span>
												<span class="stat-value">{formatDuration(stravaData.stats?.biking.ytd.elapsed_time || 0)}</span>
											</div>
										</div>
									</div>
									<div class="period-group">
										<h5>All Time</h5>
										<div class="stat-grid-detailed">
											<div class="stat-item">
												<span class="stat-label">Activities</span>
												<span class="stat-value">{stravaData.stats?.biking.all_time.count || 0}</span>
											</div>
											<div class="stat-item">
												<span class="stat-label">Distance</span>
												<span class="stat-value">{stravaData.stats?.biking.all_time.distance?.toLocaleString() || 0} mi</span>
											</div>
											<div class="stat-item">
												<span class="stat-label">Elevation</span>
												<span class="stat-value">{stravaData.stats?.biking.all_time.elevation_gain?.toLocaleString() || 0} ft</span>
											</div>
											<div class="stat-item">
												<span class="stat-label">Time</span>
												<span class="stat-value">{formatDuration(stravaData.stats?.biking.all_time.elapsed_time || 0)}</span>
											</div>
										</div>
									</div>
								</div>
								
								<div class="recent-activities-embedded">
									<h5>Recent Rides</h5>
									<div class="embedded-activities-grid">
										{stravaData.recent_bikes.slice(0, 2).map((bike: StravaActivity, index: number) => (
											<div class="embedded-activity-card">
												<div class="embedded-activity-header">
													<h6>{bike.name}</h6>
													<span class="embedded-activity-date">{formatDate(bike.start_date)}</span>
												</div>
												{bike.map?.summary_polyline && (
													<div id={`bike-map-${index}`} class="embedded-activity-map"></div>
												)}
												<div class="embedded-activity-stats">
													<div class="embedded-stat">
														<span class="embedded-stat-label">Distance</span>
														<span class="embedded-stat-value">{bike.distance} mi</span>
													</div>
													<div class="embedded-stat">
														<span class="embedded-stat-label">Time</span>
														<span class="embedded-stat-value">{formatDuration(bike.moving_time)}</span>
													</div>
													<div class="embedded-stat">
														<span class="embedded-stat-label">Elevation</span>
														<span class="embedded-stat-value">{bike.elevation_gain} ft</span>
													</div>
													<div class="embedded-stat">
														<span class="embedded-stat-label">Speed</span>
														<span class="embedded-stat-value">{formatSpeed(bike.distance, bike.moving_time)} mph</span>
													</div>
												</div>
												<a href={`https://www.strava.com/activities/${bike.id}`} target="_blank" rel="noopener noreferrer" class="embedded-activity-link">View on Strava</a>
											</div>
										))}
									</div>
								</div>
							</div>
						</div>
						<hr class="profile-separator" />
						<div class="last-updated">
							Last updated: {new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
						</div>
						<div class="profile-link-container">
							<a href="https://www.strava.com/athletes/33004088" target="_blank" rel="noopener noreferrer" class="profile-link">
								View my full Strava profile
							</a>
						</div>
					</div>
				</div>
			</section>
			<!-- Other Interests Section End -->

			<!-- Footer Section Start -->
			<footer>
				<p>© {new Date().getFullYear()} Noah Eisen. All rights reserved.</p>
			</footer>
			<!-- Footer Section End -->
		</main>
		<!-- End Main Page Content -->
	</body>
</html>
