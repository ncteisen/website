---
// Dynamically import the social data JSON module. This allows Astro to correctly bundle the data.
const socialDataModules = await import.meta.glob('../data/social_data.json');
const socialData = (await socialDataModules['../data/social_data.json']()) as { 
	letterboxd: { recent_reviews: MovieReview[] },
	goodreads: { recent_reviews: BookReview[] },
	strava: { 
		recent_runs: StravaActivity[],
		recent_bikes: StravaActivity[],
		recent_hikes: StravaActivity[]
	}
};
const letterboxdData = socialData.letterboxd;
const goodreadsData = socialData.goodreads;
const stravaData = socialData.strava;

/**
 * Represents a movie review from Letterboxd.
 */
interface MovieReview {
	/** The title of the movie. */
	title: string;
	/** The year the movie was released. */
	year: number;
	/** The rating given to the movie (out of 5). */
	rating: number;
	/** The date the movie was watched. */
	watched_date: string;
	/** Whether the movie was a rewatch. */
	is_rewatch: boolean;
	/** The review content (may include HTML). */
	review: string;
	/** The URL of the movie poster image. */
	image_url: string;
	/** The URL to the movie on Letterboxd. */
	link: string;
}

/**
 * Represents a book review from Goodreads.
 */
interface BookReview {
	/** The title of the book. */
	title: string;
	/** The author of the book. */
	author: string;
	/** The rating given to the book (out of 5). */
	rating: number;
	/** The date the book was read. */
	read_at: string;
	/** The review content (may include HTML). */
	review: string;
	/** The URL of the book cover image. */
	image_url: string;
	/** The URL to the book on Goodreads. */
	link: string;
}

/**
 * Represents a Strava activity.
 */
interface StravaActivity {
	/** The unique identifier for the activity. */
	id: number;
	/** The name of the activity. */
	name: string;
	/** The type of activity (e.g., "Run", "Ride"). */
	type: string;
	/** The distance of the activity in miles. */
	distance: number;
	/** The moving time of the activity in seconds. */
	moving_time: number;
	/** The elapsed time of the activity in seconds. */
	elapsed_time: number;
	/** The total elevation gain in feet. */
	elevation_gain: number;
	/** The average pace in minutes per mile. */
	average_pace: number;
	/** The average heart rate during the activity. */
	average_heartrate: number | null;
	/** The maximum heart rate during the activity. */
	max_heartrate: number | null;
	/** The average cadence during the activity. */
	average_cadence: number | null;
	/** The average power output in watts (for cycling). */
	average_watts: number | null;
	/** The start date and time of the activity. */
	start_date: string;
	/** The description of the activity. */
	description: string | null;
	/** Whether the activity was a commute. */
	commute: boolean;
	/** Information about the activity's map. */
	map: {
		/** The ID of the map. */
		id: string;
		/** The encoded polyline of the activity route. */
		summary_polyline: string;
		/** The resource state of the map. */
		resource_state: number;
	};
}

/**
 * Converts a numerical rating to a string of star characters.
 * For example, 3.5 becomes "★★★½".
 * @param rating The numerical rating (e.g., out of 5).
 * @returns A string representation of the rating using star characters.
 */
function getStarRating(rating: number): string {
	const fullStars = Math.floor(rating);
	const hasHalfStar = rating % 1 >= 0.5;
	
	return '★'.repeat(fullStars) + (hasHalfStar ? '½' : '');
}

/**
 * Formats a duration in seconds into a human-readable string (e.g., "1h 23m" or "45m").
 * @param seconds The duration in seconds.
 * @returns A formatted string representing the duration.
 */
function formatDuration(seconds: number): string {
	const hours = Math.floor(seconds / 3600);
	const minutes = Math.floor((seconds % 3600) / 60);
	
	if (hours > 0) {
		return `${hours}h ${minutes}m`;
	}
	return `${minutes}m`;
}

/**
 * Formats a date string into a more readable format "Month Day, Year".
 * For example, "2023-10-26T00:00:00.000Z" becomes "October 26, 2023".
 * @param dateString The date string to format.
 * @returns A formatted date string.
 */
function formatDate(dateString: string): string {
	const date = new Date(dateString);
	return date.toLocaleDateString('en-US', { 
		year: 'numeric', 
		month: 'long', 
		day: 'numeric' 
	});
}

/**
 * Calculates and formats speed given distance (in miles) and time (in seconds).
 * @param distance The distance traveled in miles.
 * @param time The time taken in seconds.
 * @returns The speed formatted as a string to one decimal place (e.g., "7.2 mph").
 */
function formatSpeed(distance: number, time: number): string {
	const speed = distance / (time / 3600);
	return speed.toFixed(1);
}
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Noah Eisen</title>
		<meta name="description" content="Noah Eisen is an engineer based in San Francisco, focused on building creative tools, fast prototypes, and playful side projects." />
		<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
     integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
     crossorigin=""/>
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />
		<!-- Google tag (gtag.js) -->
		<script async src="https://www.googletagmanager.com/gtag/js?id=G-DW532NM54T"></script>
		<script>
			// TypeScript declarations
			interface Window {
				dataLayer: any[];
				gtag: (...args: any[]) => void;
			}

			// Google Analytics 4 (GA4) setup: Initializes dataLayer and gtag function.
			window.dataLayer = window.dataLayer || [];
			window.gtag = function() { window.dataLayer.push(arguments); };
			window.gtag('js', new Date());
			window.gtag('config', 'G-DW532NM54T');
		</script>
		<script define:vars={{ stravaData }}>
			// Make Strava data (passed from Astro frontmatter) available globally on the window object for client-side JavaScript access.
			window.__STRAVA_DATA__ = stravaData;
		</script>
		<script>
			document.addEventListener('DOMContentLoaded', async function() {
				// Handles the "See more/Show less" functionality for movie reviews.
				const seeMoreButton = document.querySelector('.see-more-button');
				const moreMovies = document.getElementById('more-movies');
				
				if (seeMoreButton && moreMovies) {
					seeMoreButton.addEventListener('click', function() {
						if (moreMovies.classList.contains('hidden')) {
							moreMovies.classList.remove('hidden');
							seeMoreButton.textContent = 'Show less';
							// Track "see more movies" button click.
							window.gtag('event', 'see_more_movies', {
								'event_category': 'engagement',
								'event_label': 'movies'
							});
						} else {
							moreMovies.classList.add('hidden');
							seeMoreButton.textContent = 'See more of my recent movies';
						}
					});
				}

				// Books button
				// TODO: This selector is fragile as it relies on the button being the second one with this class. Consider adding a unique ID to this button for more robust selection.
				const seeMoreBooksButton = document.querySelectorAll('.see-more-button')[1];
				const moreBooks = document.getElementById('more-books');
				
				// Handles the "See more/Show less" functionality for book reviews.
				if (seeMoreBooksButton && moreBooks) {
					seeMoreBooksButton.addEventListener('click', function() {
						if (moreBooks.classList.contains('hidden')) {
							moreBooks.classList.remove('hidden');
							seeMoreBooksButton.textContent = 'Show less';
							// Track "see more books" button click.
							window.gtag('event', 'see_more_books', {
								'event_category': 'engagement',
								'event_label': 'books'
							});
						} else {
							moreBooks.classList.add('hidden');
							seeMoreBooksButton.textContent = 'See more of my recent books';
						}
					});
				}

				// Track social link clicks
				document.querySelectorAll('.social-link').forEach(link => {
					link.addEventListener('click', function(this: HTMLElement) {
						const href = this.getAttribute('href');
						if (href?.includes('github.com')) {
							// Track GitHub social link click.
							window.gtag('event', 'click', {
								'event_category': 'social',
								'event_label': 'github'
							});
						} else if (href?.includes('linkedin.com')) {
							// Track LinkedIn social link click.
							window.gtag('event', 'click', {
								'event_category': 'social',
								'event_label': 'linkedin'
							});
						} else if (href?.includes('resume.pdf')) {
							// Track Resume social link click.
							window.gtag('event', 'click', {
								'event_category': 'social',
								'event_label': 'resume'
							});
						}
					});
				});

				// Track profile link clicks
				document.querySelectorAll('.profile-link').forEach(link => {
					link.addEventListener('click', function(this: HTMLElement) {
						const href = this.getAttribute('href');
						if (href?.includes('letterboxd.com')) {
							// Track Letterboxd profile link click.
							window.gtag('event', 'click', {
								'event_category': 'profile',
								'event_label': 'letterboxd'
							});
						} else if (href?.includes('goodreads.com')) {
							// Track Goodreads profile link click.
							window.gtag('event', 'click', {
								'event_category': 'profile',
								'event_label': 'goodreads'
							});
						} else if (href?.includes('strava.com')) {
							// Track Strava profile link click.
							window.gtag('event', 'click', {
								'event_category': 'profile',
								'event_label': 'strava'
							});
						}
					});
				});

				try {
					// Dynamically import Leaflet and polyline libraries for map rendering.
					const L = (await import('leaflet')).default;
					const polyline = (await import('@mapbox/polyline')).default;

					// Get Strava data from the window object
					const stravaData = (window as any).__STRAVA_DATA__;

					/**
					 * Initializes a Leaflet map to display a Strava activity route.
					 * @param {string} elementId The ID of the HTML element where the map will be rendered.
					 * @param {string} encodedPolyline The encoded polyline string for the activity route.
					 */
					function initMap(elementId: string, encodedPolyline: string) {
						if (!encodedPolyline) return;

						const coordinates = polyline.decode(encodedPolyline);
						if (coordinates.length === 0) return;

						// Create map
						const map = L.map(elementId, {
							zoomControl: false,
							dragging: false,
							scrollWheelZoom: false,
						});

						// Add OpenStreetMap dark tiles
						L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
							attribution: ''
						}).addTo(map);

						// Add the route polyline
						const path = L.polyline(coordinates.map(coord => [coord[0], coord[1]]), {
							color: '#FC4C02', // Strava's brand red
							weight: 3,
							opacity: 0.8
						}).addTo(map);

						// Fit the map to the polyline bounds
						map.fitBounds(path.getBounds(), {
							padding: [20, 20]
						});
					}

					// Initialize map for the most recent run, if data is available.
					if (stravaData?.recent_runs?.[0]?.map?.summary_polyline) {
						initMap('run-map', stravaData.recent_runs[0].map.summary_polyline);
					}
					// Initialize map for the most recent bike ride, if data is available.
					if (stravaData?.recent_bikes?.[0]?.map?.summary_polyline) {
						initMap('bike-map', stravaData.recent_bikes[0].map.summary_polyline);
					}
				} catch (error) {
					console.error('Error initializing maps:', error);
				}
			});
		</script>
		<style>
			/* === Root Variables === */
			:root {
				--primary-color: #3b82f6;
				--accent-color: #10b981;
				--gold-color: #f59e0b;
				--text-color: #e5e7eb;
				--text-muted: #9ca3af;
				--background-color: #111827;
				--card-bg: #1f2937;
				--card-border: #374151;
				--link-color: #60a5fa;
				--link-hover-color: #93c5fd;
				--glow-color: rgba(59, 130, 246, 0.5);
			}

			/* === Global Styles === */
			body {
				margin: 0;
				padding: 0;
				min-height: 100vh;
				font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
				background-color: var(--background-color);
				color: var(--text-color);
				line-height: 1.6;
			}

			.container {
				max-width: 900px;
				margin: 0 auto;
				padding: 2rem;
			}

			/* === Header Styles === */
			header {
				margin-bottom: 4rem;
				display: flex;
				align-items: center;
				gap: 3rem;
			}

			.header-content {
				flex: 1;
			}

			.profile-image-container {
				flex-shrink: 0;
				width: 200px;
				height: 200px;
				border-radius: 50%;
				overflow: hidden;
				border: 2px solid var(--primary-color);
				box-shadow: 0 0 10px rgba(59, 130, 246, 0.3);
			}

			.profile-image {
				width: 100%;
				height: 100%;
				object-fit: cover;
			}

			h1 {
				font-size: 2.5rem;
				font-weight: 700;
				margin-bottom: 1rem;
				background: linear-gradient(to right, var(--primary-color), var(--accent-color));
				-webkit-background-clip: text;
				-webkit-text-fill-color: transparent;
			}

			h2 {
				font-size: 1.75rem;
				font-weight: 600;
				margin-bottom: 1.5rem;
				color: var(--text-color);
			}

			p {
				font-size: 1.1rem;
				margin-bottom: 1.5rem;
				color: var(--text-muted);
			}

			/* === General Section Styles === */
			section {
				margin-bottom: 4rem;
			}

			/* === Social Links === */
			.social-links {
				display: flex;
				gap: 1.5rem;
				margin-top: 1.5rem;
			}

			.social-link {
				color: var(--link-color);
				text-decoration: none;
				font-weight: 500;
				transition: all 0.2s ease;
				display: flex;
				align-items: center;
				gap: 0.5rem;
			}

			.social-link:hover {
				color: var(--link-hover-color);
				text-shadow: 0 0 8px var(--glow-color);
			}

			/* === Section: Career === */
			.career-highlights {
				display: grid;
				grid-template-columns: repeat(2, 1fr);
				gap: 2rem;
				margin-top: 1.5rem;
				max-width: 1200px;
				margin-left: auto;
				margin-right: auto;
			}

			.highlight-card {
				background-color: var(--card-bg);
				border: 1px solid var(--card-border);
				border-radius: 8px;
				padding: 1.5rem;
				transition: all 0.3s ease;
				display: flex;
				flex-direction: column;
				position: relative;
			}

			.highlight-card .company-icon {
				position: absolute;
				top: 1.5rem;
				right: 1.5rem;
				font-size: 1.5rem;
				color: var(--primary-color);
				opacity: 0.7;
			}

			.highlight-card:hover .company-icon {
				opacity: 1;
				transform: scale(1.1);
			}

			.highlight-card h3 {
				font-size: 1.25rem;
				font-weight: 600;
				margin-bottom: 0.25rem;
				color: var(--primary-color);
			}

			.highlight-card .job-title {
				font-size: 1.1rem;
				font-weight: 500;
				margin-bottom: 0.25rem;
				color: var(--text-color);
			}

			.highlight-card .date-range {
				font-size: 0.9rem;
				color: var(--text-muted);
				margin-bottom: 0.75rem;
				font-style: italic;
			}

			.highlight-card p {
				font-size: 0.95rem;
				line-height: 1.6;
				margin-bottom: 0;
				color: var(--text-muted);
			}

			.highlight-card a {
				color: var(--text-muted);
				text-decoration: underline;
				text-decoration-thickness: 1px;
				text-underline-offset: 2px;
				transition: all 0.2s ease;
			}

			.highlight-card a:hover {
				color: var(--text-color);
				text-decoration-thickness: 2px;
			}

			.highlight-card:hover {
				transform: translateY(-3px);
				box-shadow: 0 0 15px rgba(59, 130, 246, 0.2);
			}

			/* === Card Styles === */
			/* --- Highlight Card (Used in Career Section) --- */
			.highlight-card {
				background-color: var(--card-bg);
				border: 1px solid var(--card-border);
				border-radius: 8px;
				padding: 1.5rem;
				transition: all 0.3s ease;
				display: flex;
				flex-direction: column;
				position: relative;
			}

			.highlight-card .company-icon {
				position: absolute;
				top: 1.5rem;
				right: 1.5rem;
				font-size: 1.5rem;
				color: var(--primary-color);
				opacity: 0.7;
			}

			.highlight-card:hover .company-icon {
				opacity: 1;
				transform: scale(1.1);
			}

			.highlight-card h3 {
				font-size: 1.25rem;
				font-weight: 600;
				margin-bottom: 0.25rem;
				color: var(--primary-color);
			}

			.highlight-card .job-title {
				font-size: 1.1rem;
				font-weight: 500;
				margin-bottom: 0.25rem;
				color: var(--text-color);
			}

			.highlight-card .date-range {
				font-size: 0.9rem;
				color: var(--text-muted);
				margin-bottom: 0.75rem;
				font-style: italic;
			}

			.highlight-card p {
				font-size: 0.95rem;
				line-height: 1.6;
				margin-bottom: 0;
				color: var(--text-muted);
			}

			.highlight-card a {
				color: var(--text-muted);
				text-decoration: underline;
				text-decoration-thickness: 1px;
				text-underline-offset: 2px;
				transition: all 0.2s ease;
			}

			.highlight-card a:hover {
				color: var(--text-color);
				text-decoration-thickness: 2px;
			}

			.highlight-card:hover {
				transform: translateY(-3px);
				box-shadow: 0 0 15px rgba(59, 130, 246, 0.2);
			}

			/* === Section: Side Projects === */
			.projects-grid {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
				gap: 1.5rem;
				margin-top: 1.5rem;
			}

			.project-card {
				background-color: var(--card-bg);
				border: 1px solid var(--card-border);
				border-radius: 8px;
				padding: 1.5rem;
				transition: all 0.3s ease;
				text-decoration: none;
				color: var(--text-color);
				display: block;
			}

			.project-card:hover {
				transform: translateY(-5px);
				box-shadow: 0 0 15px rgba(59, 130, 246, 0.2);
				border-color: var(--primary-color);
			}

			.project-title {
				font-size: 1.25rem;
				font-weight: 600;
				margin-bottom: 0.5rem;
				color: var(--primary-color);
			}

			.project-description {
				font-size: 0.95rem;
				color: var(--text-muted);
			}

			/* --- Project Card --- */
			.project-card {
				background-color: var(--card-bg);
				border: 1px solid var(--card-border);
				border-radius: 8px;
				padding: 1.5rem;
				transition: all 0.3s ease;
				text-decoration: none;
				color: var(--text-color);
				display: block;
			}

			.project-card:hover {
				transform: translateY(-5px);
				box-shadow: 0 0 15px rgba(59, 130, 246, 0.2);
				border-color: var(--primary-color);
			}

			.project-title {
				font-size: 1.25rem;
				font-weight: 600;
				margin-bottom: 0.5rem;
				color: var(--primary-color);
			}

			.project-description {
				font-size: 0.95rem;
				color: var(--text-muted);
			}

			#projects a { /* Specific link styling within projects section */
				color: var(--link-color);
				text-decoration: none;
				font-weight: 500;
				transition: all 0.2s ease;
			}

			#projects a:hover {
				color: var(--link-hover-color);
				text-shadow: 0 0 8px var(--glow-color);
			}

			/* === Footer Styles === */
			footer {
				text-align: center;
				margin-top: 4rem;
				padding-top: 2rem;
				border-top: 1px solid var(--card-border);
				color: var(--text-muted);
				font-size: 0.9rem;
			}

			/* === Media Queries === */
			/* --- Tablet and Smaller (max-width: 768px) --- */
			@media (max-width: 768px) {
				.container {
					padding: 1.5rem;
				}

				header {
					flex-direction: column-reverse;
					text-align: center;
					gap: 2rem;
				}

				.profile-image-container {
					width: 150px;
					height: 150px;
				}

				.social-links {
					justify-content: center;
				}

				h1 {
					font-size: 2rem;
				}

				h2 {
					font-size: 1.5rem;
				}

				.career-highlights, .projects-grid {
					grid-template-columns: 1fr;
				}

				.interests-grid {
					grid-template-columns: 1fr;
				}

				.movie-card {
					flex-direction: column;
					align-items: flex-start;
				}

				.movie-card img {
					width: 100%;
					max-width: 200px;
					height: auto;
					aspect-ratio: 2/3;
				}

				.recent-movies {
					grid-template-columns: 1fr;
				}

				.stat-grid {
					grid-template-columns: 1fr;
				}

				/* Make fitness activity cards stack vertically on mobile */
				.interest-card:nth-child(3) .recent-movies {
					grid-template-columns: 1fr;
				}
			}

			/* --- Smaller Desktop (max-width: 900px) --- */
			@media (max-width: 900px) {
				.career-highlights {
					grid-template-columns: 1fr;
					gap: 1.5rem;
				}
			}

			/* === Section: Other Interests === */
			#other-interests {
				margin-bottom: 4rem;
			}

			/* --- Interest Card (Parent for Movie/Book/Fitness cards) --- */
			.interests-grid {
				display: grid;
				grid-template-columns: 1fr;
				gap: 2rem;
				margin-top: 1.5rem;
			}

			.interest-card {
				background-color: var(--card-bg);
				border: 1px solid var(--card-border);
				border-radius: 8px;
				padding: 1.5rem;
				transition: all 0.3s ease;
				position: relative;
			}

			.interest-card h3 {
				font-size: 1.25rem;
				font-weight: 600;
				margin-bottom: 1rem;
				color: var(--primary-color);
			}

			.interest-card .section-icon {
				position: absolute;
				top: 1.5rem;
				right: 1.5rem;
				font-size: 1.5rem;
				color: var(--primary-color);
				opacity: 0.7;
			}

			.interest-card:hover .section-icon {
				opacity: 1;
				transform: scale(1.1);
			}

			.interest-card p {
				color: var(--text-muted);
			}

			.interest-card {
				background-color: var(--card-bg);
				border: 1px solid var(--card-border);
				border-radius: 8px;
				padding: 1.5rem;
				transition: all 0.3s ease;
				position: relative;
			}

			.interest-card h3 {
				font-size: 1.25rem;
				font-weight: 600;
				margin-bottom: 1rem;
				color: var(--primary-color);
			}

			.interest-card .section-icon {
				position: absolute;
				top: 1.5rem;
				right: 1.5rem;
				font-size: 1.5rem;
				color: var(--primary-color);
				opacity: 0.7;
			}

			.interest-card:hover .section-icon {
				opacity: 1;
				transform: scale(1.1);
			}

			.interest-card p {
				color: var(--text-muted);
			}

			/* --- Movie/Book/Activity Card Container --- */
			.recent-movies { /* This class is used for movies, books, and fitness activities lists */
				margin-top: 1rem;
				display: grid;
				grid-template-columns: 1fr;
				gap: 1.5rem;
			}

			.movie-card {
				margin-bottom: 0;
				padding: 1.5rem;
				border: 1px solid var(--card-border);
				border-radius: 8px;
				background-color: rgba(31, 41, 55, 0.5);
				display: flex;
				gap: 1rem;
				transition: all 0.3s ease;
			}

			.movie-card:hover {
				transform: translateY(-2px);
				box-shadow: 0 0 15px rgba(59, 130, 246, 0.1);
				border-color: var(--primary-color);
			}

			.movie-card:last-child {
				margin-bottom: 0;
			}

			.movie-card img {
				width: 150px;
				height: 225px;
				border-radius: 4px;
				object-fit: cover;
				box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
			}

			/* --- Movie/Book/Activity Info --- */
			.movie-info { /* Shared by movie, book, and activity cards */
				flex: 1;
				display: flex;
				flex-direction: column;
			}

			.movie-info h4 {
				margin: 0 0 0.25rem 0;
				font-size: 1.1rem;
				color: var(--text-color);
			}

			.rating {
				color: var(--gold-color);
				font-weight: bold;
				margin: 0;
				margin-bottom: 0.5rem;
				letter-spacing: 2px;
				line-height: 1;
			}

			/* === Utility Styles === */
			.rating { /* Star rating display */
				color: var(--gold-color);
				font-weight: bold;
				margin: 0;
				margin-bottom: 0.5rem;
				letter-spacing: 2px;
				line-height: 1;
			}

			.review { /* Review text block */
				margin: -1rem 0rem 0rem 0rem;
				color: var(--text-muted);
				font-size: 0.95rem;
			}

			.review p {
				margin: 0;
			}

			.review em {
				font-style: italic;
			}

			.review strong {
				font-weight: bold;
			}

			.review a {
				color: var(--link-color);
				text-decoration: none;
				font-weight: 500;
				transition: all 0.2s ease;
			}

			.review a:hover {
				color: var(--link-hover-color);
				text-shadow: 0 0 8px var(--glow-color);
			}

			.watched-date { /* Date styling for movies/books */
				font-size: 0.75rem;
				color: var(--text-muted);
				opacity: 0.5;
				margin-top: 0.15rem;
				margin-bottom: 0.5rem;
				font-style: italic;
				letter-spacing: 0.5px;
				font-weight: 300;
			}

			.movie-link {
				color: var(--link-color);
				text-decoration: none;
				font-weight: 500;
				transition: all 0.2s ease;
				font-size: 0.9rem;
				margin-top: auto;
			}

			.movie-link:hover {
				color: var(--link-hover-color);
				text-shadow: 0 0 8px var(--glow-color);
			}

			/* --- Profile Links & Separators --- */
			.profile-separator {
				border: none;
				border-top: 1px solid var(--card-border);
				margin: 2rem 0;
				width: 50%;
				margin-left: auto;
				margin-right: auto;
			}

			.profile-link-container {
				text-align: center;
			}

			.profile-link {
				color: var(--link-color);
				text-decoration: none;
				font-weight: 500;
				transition: all 0.2s ease;
				display: inline-block;
			}

			.profile-link:hover {
				color: var(--link-hover-color);
				text-shadow: 0 0 8px var(--glow-color);
			}

			.last-updated {
				text-align: center;
				font-size: 0.8rem;
				color: var(--text-muted);
				opacity: 0.7;
				margin-top: 0.5rem;
				font-style: italic;
			}

			/* --- "See More" Button Styles --- */
			.see-more-container {
				text-align: center;
				margin: 1.5rem 0;
			}

			.see-more-button {
				background: none;
				border: 1px solid var(--primary-color);
				color: var(--primary-color);
				padding: 0.5rem 1rem;
				border-radius: 4px;
				font-size: 0.9rem;
				font-weight: 500;
				cursor: pointer;
				transition: all 0.2s ease;
			}

			.see-more-button:hover {
				background-color: var(--primary-color);
				color: var(--text-color);
			}

			.more-movies { /* Container for additional movies/books shown by "See More" button */
				margin-top: 1.5rem;
				display: grid;
				grid-template-columns: 1fr;
				gap: .75rem;
			}

			.hidden { /* Utility class to hide elements */
				display: none;
			}

			/* === Section: Fitness (Strava) === */
			.activity-date {
				font-size: 0.75rem;
				color: var(--text-muted);
				opacity: 0.7;
				margin-top: 0.15rem;
				margin-bottom: 0.5rem;
				font-style: italic;
				letter-spacing: 0.5px;
				font-weight: 300;
			}

			.activity-stats {
				margin-top: -1rem;;
				color: var(--text-muted);
				font-size: 0.95rem;
				line-height: 1.6;
			}

			.activity-stats strong {
				color: var(--text-color);
				font-weight: 500;
			}

			.activity-icon {
				margin-right: 0.5rem;
				color: var(--primary-color);
			}

			.activity-stats { /* Container for activity statistics */
				margin-top: -1rem;
				color: var(--text-muted);
				font-size: 0.95rem;
				line-height: 1.6;
			}

			.activity-stats strong {
				color: var(--text-color);
				font-weight: 500;
			}

			.activity-icon {
				margin-right: 0.5rem;
				color: var(--primary-color);
			}

			.strava-embed { /* Styles for deprecated Strava embed (if ever used) */
				width: 100%;
				max-width: 590px;
				height: 405px;
				margin: 1rem 0;
				border-radius: 4px;
				overflow: hidden;
			}

			.stat-grid {
				display: grid;
				grid-template-columns: repeat(2, 1fr);
				gap: 1rem;
				margin: 1rem 0;
			}

			.stat-item {
				display: flex;
				flex-direction: column;
				align-items: center;
				padding: 0.75rem;
				background-color: rgba(31, 41, 55, 0.5);
				border-radius: 4px;
				border: 1px solid var(--card-border);
			}

			.stat-label {
				font-size: 0.75rem;
				color: var(--text-muted);
				text-transform: uppercase;
				letter-spacing: 0.5px;
				margin-bottom: 0.25rem;
			}

			.stat-value {
					font-size: 1.1rem;
				color: var(--text-color);
				font-weight: 500;
			}

			.activity-map {
				width: 100%;
				height: 300px;
				margin: 1rem 0;
				border-radius: 4px;
				overflow: hidden;
				border: 1px solid var(--card-border);
			}

			/* --- Stat Grid (for fitness activities) --- */
			.stat-grid {
				display: grid;
				grid-template-columns: repeat(2, 1fr);
				gap: 1rem;
				margin: 1rem 0;
			}

			.stat-item {
				display: flex;
				flex-direction: column;
				align-items: center;
				padding: 0.75rem;
				background-color: rgba(31, 41, 55, 0.5);
				border-radius: 4px;
				border: 1px solid var(--card-border);
			}

			.stat-label {
				font-size: 0.75rem;
				color: var(--text-muted);
				text-transform: uppercase;
				letter-spacing: 0.5px;
				margin-bottom: 0.25rem;
			}

			.stat-value {
					font-size: 1.1rem;
				color: var(--text-color);
				font-weight: 500;
			}

			/* --- Activity Map --- */
			.activity-map {
				width: 100%;
				height: 300px;
				margin: 1rem 0;
				border-radius: 4px;
				overflow: hidden;
				border: 1px solid var(--card-border);
			}

			/* --- Fitness Activities Layout --- */
			.fitness-activities { /* Grid for run/bike cards */
				display: grid;
				grid-template-columns: 1fr 1fr;
				gap: 1rem;
			}

			@media (max-width: 768px) {
				.fitness-activities { /* Stack fitness activities on smaller screens */
					grid-template-columns: 1fr;
				}
			}
		</style>
	</head>
	<body>
		<!-- Main Page Content -->
		<main class="container" role="main">
			<!-- Header Section Start -->
			<header>
				<div class="header-content">
					<h1>Noah Eisen</h1>
					<p>
						Hi, I'm Noah, an engineer based in San Francisco with a background in Computer 
						Science and Mathematics from the University of Michigan. Over the past decade, 
						I've led teams and shipped projects at companies like Google, Waymo, and 
						Faire. My experience spans infrastructure and product development, with a consistent 
						emphasis on clean code, maintainable systems, and thoughtful architecture.</p>
					<div class="social-links">
						<a href="https://github.com/ncteisen" class="social-link" tabindex="0" aria-label="GitHub Profile" target="_blank" rel="noopener noreferrer">
							GitHub
						</a>
						<a href="https://linkedin.com/in/ncteisen" class="social-link" tabindex="0" aria-label="LinkedIn Profile" target="_blank" rel="noopener noreferrer">
							LinkedIn
						</a>
						<a href="mailto:ncteisen@gmail.com" class="social-link" tabindex="0" aria-label="Email">
							Email
						</a>
						<a href="/resume.pdf" class="social-link" tabindex="0" aria-label="Resume PDF" target="_blank" rel="noopener noreferrer">
							Resume
						</a>
					</div>
				</div>
				<div class="profile-image-container">
					<img 
						src="/images/profile-placeholder.jpg" 
						alt="Noah Eisen" 
						class="profile-image"
						width="200"
						height="200"
					/>
				</div>
			</header>
			<!-- Header Section End -->

			<!-- Career Snapshot Section Start -->
			<section id="career">
				<h2>Career Snapshot</h2>
				<div class="career-highlights">
					<div class="highlight-card">
						<i class="fas fa-store company-icon" aria-hidden="true"></i>
						<h3>Faire</h3>
						<div class="job-title">Staff Software Engineer</div>
						<div class="date-range">Feb 2022 - Present</div>
						<p>
							At Faire - a fast-moving, high-growth startup - I've worn many hats: hands-on engineer, 
							system architect, tech lead, and senior engineering manager. I've led platform work 
							across shipping, payments, and third-party integrations, delivering high-impact 
							features like multi-user account infrastructure, SQL-based invariant validation, 
							and guaranteed shipping pricing. I authored Faire's long-term technical vision 
							for shipping and oversaw complex service extractions in payments. Whether driving 
							strategy or writing critical path code, my focus has been on close patnership with 
							prodcut and building scalable systems that move fast without compromising on reliability.
						</p>
					</div>
					<div class="highlight-card">
						<i class="fas fa-car company-icon" aria-hidden="true"></i>
						<h3>Waymo</h3>
						<div class="job-title">Senior Software Engineer</div>
						<div class="date-range">Feb 2019 - Feb 2022</div>
						<p>
							At Waymo, I was on the Fleet Infrastructure team, leading development of OpsApp, an 
							internal Android application used daily by over 1,000 safety drivers. I managed a 
							cross-functional team spanning engineering, product, UX, and operations, and drove 
							initiatives to ensure safety, speed, and reliability across the self-driving fleet. 
							I built systems to stream real-time telemetry with sub-300ms latency, integrated 
							compliance checklists directly into vehicle startup logic, and designed roadside 
							support tooling that enabled responders to locate vehicles within minutes of an 
							incident. I co-authored 
							<a href="https://patents.justia.com/patent/20230347937" target="_blank" rel="noopener noreferrer">
								a patent
							</a> 
							for my work on the subject.
						</p>
					</div>
					<div class="highlight-card">
						<i class="fab fa-google company-icon" aria-hidden="true"></i>
						<h3>Google</h3>
						<div class="job-title">Software Engineer</div>
						<div class="date-range">Aug 2016 - Feb 2019</div>
						<p>
							I started my full-time career at Google as part of the gRPC team, contributing to core C, C++, 
							and Python libraries that power Google's internal and external services. I built 
							benchmarking and regression detection tools, helped migrate TensorFlow's distributed 
							runtime to gRPC, and gave a 
							<a href="https://www.youtube.com/watch?v=cWlXQP9AORo" target="_blank" rel="noopener noreferrer">
								tech talk at KubeCon on tuning RPC performance
							</a>.
						</p>
					</div>
					<div class="highlight-card">
						<i class="fas fa-chart-line company-icon" aria-hidden="true"></i>
						<h3>Bloomberg</h3>
						<div class="job-title">Software Engineering Intern</div>
						<div class="date-range">Summer 2015</div>
						<p>
							Full stack internship on the infrastructure team. Built internal tooling to help debug and kill
							processes running on production machines.
						</p>
					</div>
				</div>
			</section>
			<!-- Career Snapshot Section End -->

			<!-- Side Projects Section Start -->
			<section id="projects">
				<h2>Side Projects</h2>
				<p>Newer projects coming soon! In the meantime, you can check out my <a href="/old">old website</a> for projects I made many years ago.</p>
				<div class="projects-grid">
					<a href="/projects/sarah-jumps" class="project-card" tabindex="0">
						<h3 class="project-title">Sarah Jumps</h3>
						<p class="project-description">Doodle jump inspired game I made to explore vibe coding.</p>
					</a>
					<a href="https://www.hypertextlibrary.com/" class="project-card" tabindex="0" target="_blank" rel="noopener noreferrer">
						<h3 class="project-title">The Hypertext Library</h3>
						<p class="project-description">Literature-based side project I made a decade ago after taking a class on Ulysses.</p>
					</a>
					<a href="/old/projects/p1/" class="project-card" tabindex="0">
						<h3 class="project-title">Room Game</h3>
						<p class="project-description">Simple text-based game I made in college to teach myself JavaScript.</p>
					</a>
				</div>
			</section>
			<!-- Side Projects Section End -->

			<!-- Other Interests Section Start -->
			<section id="other-interests">
				<h2>Other Interests</h2>
				<div class="interests-grid">
					<div class="interest-card">
						<h3>Movies</h3>
						<i class="fas fa-film section-icon" aria-hidden="true"></i>
						<p>I'm an avid film enthusiast and maintain a detailed log of my movie watching on Letterboxd.</p>
						<div class="recent-movies">
							{letterboxdData.recent_reviews.slice(0, 1).map((movie: MovieReview) => (
								<div class="movie-card">
									<img src={movie.image_url} alt={`Poster for ${movie.title}`} width="200" height="300" />
									<div class="movie-info">
										<h4>{movie.title} ({movie.year})</h4>
										<p class="rating">{getStarRating(movie.rating)}</p>
										<p class="watched-date">Watched on {movie.watched_date}</p>
										{/* Using set:html to render HTML content from the movie review. Astro sanitizes this by default. */}
										<div class="review" set:html={movie.review}></div>
										<a href={movie.link} target="_blank" rel="noopener noreferrer" class="movie-link">View on Letterboxd</a>
									</div>
								</div>
							))}
						</div>
						<div class="see-more-container">
							<button class="see-more-button">See more of my recent movies</button>
						</div>
						<div id="more-movies" class="more-movies hidden">
							{letterboxdData.recent_reviews.slice(1).map((movie: MovieReview) => (
								<div class="movie-card">
									<img src={movie.image_url} alt={`Poster for ${movie.title}`} width="200" height="300" />
									<div class="movie-info">
										<h4>{movie.title} ({movie.year})</h4>
										<p class="rating">{getStarRating(movie.rating)}</p>
										<p class="watched-date">Watched on {movie.watched_date}</p>
										{/* Using set:html to render HTML content from the movie review. Astro sanitizes this by default. */}
										<div class="review" set:html={movie.review}></div>
										<a href={movie.link} target="_blank" rel="noopener noreferrer" class="movie-link">View on Letterboxd</a>
									</div>
								</div>
							))}
						</div>
						<hr class="profile-separator" />
						<div class="last-updated">
							Last updated: {new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
						</div>
						<div class="profile-link-container">
							<a href="https://letterboxd.com/ncteisen/" target="_blank" rel="noopener noreferrer" class="profile-link">
								View my full Letterboxd profile
							</a>
						</div>
					</div>

					<div class="interest-card">
						<h3>Books</h3>
						<i class="fas fa-book section-icon" aria-hidden="true"></i>
						<p>I love reading and track my reading progress on Goodreads.</p>
						<div class="recent-movies">
							{goodreadsData.recent_reviews.slice(0, 1).map((book: BookReview) => (
								<div class="movie-card">
									<img src={book.image_url} alt={`Cover of ${book.title}`} width="200" height="300" />
									<div class="movie-info">
										<h4>{book.title}</h4>
										<p class="rating">{getStarRating(book.rating)}</p>
										<p class="watched-date">Read on {book.read_at}</p>
										{/* Using set:html to render HTML content from the book review. Astro sanitizes this by default. */}
										<div class="review" set:html={book.review}></div>
										<a href={book.link} target="_blank" rel="noopener noreferrer" class="movie-link">View on Goodreads</a>
									</div>
								</div>
							))}
						</div>
						<div class="see-more-container">
							<button class="see-more-button">See more of my recent books</button>
						</div>
						<div id="more-books" class="more-movies hidden">
							{goodreadsData.recent_reviews.slice(1).map((book: BookReview) => (
								<div class="movie-card">
									<img src={book.image_url} alt={`Cover of ${book.title}`} width="200" height="300" />
									<div class="movie-info">
										<h4>{book.title}</h4>
										<p class="rating">{getStarRating(book.rating)}</p>
										<p class="watched-date">Read on {book.read_at}</p>
										{/* Using set:html to render HTML content from the book review. Astro sanitizes this by default. */}
										<div class="review" set:html={book.review}></div>
										<a href={book.link} target="_blank" rel="noopener noreferrer" class="movie-link">View on Goodreads</a>
									</div>
								</div>
							))}
						</div>
						<hr class="profile-separator" />
						<div class="last-updated">
							Last updated: {new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
						</div>
						<div class="profile-link-container">
							<a href="https://www.goodreads.com/user/show/44763252-noah-eisen" target="_blank" rel="noopener noreferrer" class="profile-link">
								View my full Goodreads profile
							</a>
						</div>
					</div>

					<div class="interest-card">
						<h3>Fitness</h3>
						<i class="fas fa-heartbeat section-icon" aria-hidden="true"></i>
						<p>I enjoy running and cycling around San Francisco. Here are my most recent workouts:</p>
						<div class="recent-movies fitness-activities">
							{stravaData.recent_runs[0] && (
								<div class="movie-card">
									<div class="movie-info">
										<h4><i class="fas fa-running activity-icon" aria-hidden="true"></i>{stravaData.recent_runs[0].name}</h4>
										<p class="activity-date">{formatDate(stravaData.recent_runs[0].start_date)}</p>
										<div id="run-map" class="activity-map"></div>
										<div class="activity-stats">
											<div class="stat-grid">
												<div class="stat-item">
													<span class="stat-label">Distance</span>
													<span class="stat-value">{stravaData.recent_runs[0].distance} miles</span>
												</div>
												<div class="stat-item">
													<span class="stat-label">Time</span>
													<span class="stat-value">{formatDuration(stravaData.recent_runs[0].moving_time)}</span>
												</div>
												<div class="stat-item">
													<span class="stat-label">Elevation</span>
													<span class="stat-value">{stravaData.recent_runs[0].elevation_gain} ft</span>
												</div>
												<div class="stat-item">
													<span class="stat-label">Pace</span>
													<span class="stat-value">{stravaData.recent_runs[0].average_pace} min/mile</span>
												</div>
											</div>
										</div>
										<a href={`https://www.strava.com/activities/${stravaData.recent_runs[0].id}`} target="_blank" rel="noopener noreferrer" class="movie-link">View on Strava</a>
									</div>
								</div>
							)}
							{stravaData.recent_bikes[0] && (
								<div class="movie-card">
									<div class="movie-info">
										<h4><i class="fas fa-biking activity-icon" aria-hidden="true"></i>{stravaData.recent_bikes[0].name}</h4>
										<p class="activity-date">{formatDate(stravaData.recent_bikes[0].start_date)}</p>
										<div id="bike-map" class="activity-map"></div>
										<div class="activity-stats">
											<div class="stat-grid">
												<div class="stat-item">
													<span class="stat-label">Distance</span>
													<span class="stat-value">{stravaData.recent_bikes[0].distance} miles</span>
												</div>
												<div class="stat-item">
													<span class="stat-label">Time</span>
													<span class="stat-value">{formatDuration(stravaData.recent_bikes[0].moving_time)}</span>
												</div>
												<div class="stat-item">
													<span class="stat-label">Elevation</span>
													<span class="stat-value">{stravaData.recent_bikes[0].elevation_gain} ft</span>
												</div>
												<div class="stat-item">
													<span class="stat-label">Speed</span>
													<span class="stat-value">{formatSpeed(stravaData.recent_bikes[0].distance, stravaData.recent_bikes[0].moving_time)} mph</span>
												</div>
											</div>
										</div>
										<a href={`https://www.strava.com/activities/${stravaData.recent_bikes[0].id}`} target="_blank" rel="noopener noreferrer" class="movie-link">View on Strava</a>
									</div>
								</div>
							)}
						</div>
						<hr class="profile-separator" />
						<div class="last-updated">
							Last updated: {new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
						</div>
						<div class="profile-link-container">
							<a href="https://www.strava.com/athletes/33004088" target="_blank" rel="noopener noreferrer" class="profile-link">
								View my full Strava profile
							</a>
						</div>
					</div>
				</div>
			</section>
			<!-- Other Interests Section End -->

			<!-- Footer Section Start -->
			<footer>
				<p>© {new Date().getFullYear()} Noah Eisen. All rights reserved.</p>
			</footer>
			<!-- Footer Section End -->
		</main>
		<!-- End Main Page Content -->
	</body>
</html>
